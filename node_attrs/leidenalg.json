{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/245975246.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/336049443.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/390478042.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"pypy"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/408790698.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.8.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{},
 "feedstock_name":"leidenalg",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"This package implements the Leiden algorithm in C++ and\nexposes it to python. It relies on (python-)igraph for it to\nfunction. Besides the relative flexibility of the\nimplementation, it also scales well, and can be run on graphs\nof millions of nodes (as long as they can fit in memory).\nThe core function is find_partition which is able to optimize a\nvariety of quality functions using the Leiden algorithm.\n",
   "dev_url":"https://github.com/vtraag/leidenalg",
   "doc_url":"http://leidenalg.readthedocs.io/",
   "home":"https://github.com/vtraag/leidenalg",
   "license":"GPLv3",
   "license_family":"GPL",
   "license_file":"LICENSE",
   "summary":"Implementation of the Leiden algorithm for various methods for use with igraph in python."
  },
  "build":{
   "number":"0",
   "script":"-m pip install . --no-deps -vv --no-build-isolation",
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "vtraag",
    "vtraag",
    "vtraag"
   ]
  },
  "package":{
   "name":"leidenalg",
   "version":"0.8.0"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "autoconf",
    "bison",
    "flex",
    "libtool",
    "vs2017_",
    "posix",
    "m2w64-toolchain",
    "m2-automake-wrapper",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "pkg-config",
    "make",
    "autoconf",
    "automake",
    "bison",
    "flex",
    "libtool",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "pkg-config",
    "make",
    "autoconf",
    "automake",
    "bison",
    "flex",
    "libtool"
   ],
   "host":[
    "python",
    "pip",
    "setuptools",
    "setuptools_scm",
    "python-igraph",
    "python",
    "pip",
    "setuptools",
    "setuptools_scm",
    "python-igraph",
    "python",
    "pip",
    "setuptools",
    "setuptools_scm",
    "python-igraph"
   ],
   "run":[
    "python",
    "setuptools",
    "python-igraph",
    "python",
    "setuptools",
    "python-igraph",
    "python",
    "setuptools",
    "python-igraph"
   ]
  },
  "source":{
   "fn":"leidenalg-0.8.0.tar.gz",
   "patches":[
    "patches/0001-remove-pyproject.toml.patch",
    "patches/0001-remove-pyproject.toml.patch",
    "patches/0001-remove-pyproject.toml.patch"
   ],
   "sha256":"ebab74ce92615b614bef9ec36a7318c45db928bd795ed262c4a10f4d009196ef",
   "url":"https://pypi.io/packages/source/l/leidenalg/leidenalg-0.8.0.tar.gz"
  },
  "test":{
   "imports":[
    "igraph",
    "leidenalg",
    "igraph",
    "leidenalg",
    "igraph",
    "leidenalg"
   ]
  }
 },
 "name":"leidenalg",
 "new_version":"0.8.0",
 "new_version_attempts":{
  "0.8.0":1
 },
 "new_version_errors":{},
 "pinning_version":"2020.04.24.08.48.19",
 "raw_meta_yaml":"{% set name = \"leidenalg\" %}\n{% set version = \"0.8.0\" %}\n{% set sha256 = \"ebab74ce92615b614bef9ec36a7318c45db928bd795ed262c4a10f4d009196ef\" %}\n{% set posix = 'm2-' if win else '' %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n  patches:\n    - patches/0001-remove-pyproject.toml.patch\n\nbuild:\n  number: 0\n  script: {{ PYTHON }} -m pip install . --no-deps -vv --no-build-isolation  # [not win]\n  skip : true  # [win and vc<14]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('fortran') }}\n    - pkg-config  # [not win]\n    - make  # [not win]\n    - {{ posix }}autoconf\n    - automake  # [not win]\n    - {{ posix }}bison\n    - {{ posix }}flex\n    - {{ posix }}libtool\n    - vs2017_{{ target_platform }}  # [win]\n    - posix  # [win]\n    - m2w64-toolchain  # [win]\n    - m2-automake-wrapper  # [win]\n  host:\n    - python\n    - pip\n    - setuptools\n    - setuptools_scm\n    - python-igraph\n  run:\n    - python\n    - setuptools\n    - python-igraph\n\ntest:\n  imports:\n    - igraph\n    - leidenalg\n\nabout:\n  home: https://github.com/vtraag/leidenalg\n  license: GPLv3\n  license_family: GPL\n  license_file: LICENSE\n  summary: Implementation of the Leiden algorithm for various methods for use with igraph in python.\n  description: |\n    This package implements the Leiden algorithm in C++ and\n    exposes it to python. It relies on (python-)igraph for it to\n    function. Besides the relative flexibility of the\n    implementation, it also scales well, and can be run on graphs\n    of millions of nodes (as long as they can fit in memory).\n    The core function is find_partition which is able to optimize a\n    variety of quality functions using the Leiden algorithm.\n  doc_url: http://leidenalg.readthedocs.io/\n  dev_url: https://github.com/vtraag/leidenalg\n\nextra:\n  recipe-maintainers:\n    - vtraag\n",
 "req":{
  "__set__":true,
  "elements":[
   "autoconf",
   "automake",
   "bison",
   "c_compiler_stub",
   "cxx_compiler_stub",
   "flex",
   "fortran_compiler_stub",
   "libtool",
   "m2-automake-wrapper",
   "m2w64-toolchain",
   "make",
   "pip",
   "pkg-config",
   "posix",
   "python",
   "python-igraph",
   "setuptools",
   "setuptools_scm",
   "vs2017_"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "autoconf",
    "automake",
    "bison",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "flex",
    "fortran_compiler_stub",
    "libtool",
    "m2-automake-wrapper",
    "m2w64-toolchain",
    "make",
    "pkg-config",
    "posix",
    "vs2017_"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python",
    "python-igraph",
    "setuptools",
    "setuptools_scm"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "python",
    "python-igraph",
    "setuptools"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.6.17",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "autoconf",
    "automake",
    "bison",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "flex",
    "fortran_compiler_stub",
    "libtool",
    "m2-automake-wrapper",
    "m2w64-toolchain",
    "make",
    "pkg-config",
    "posix",
    "vs2017_"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python",
    "python-igraph",
    "setuptools",
    "setuptools_scm"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "python",
    "python-igraph",
    "setuptools"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://pypi.io/packages/source/l/leidenalg/leidenalg-0.7.0.tar.gz",
 "version":"0.8.0"
}