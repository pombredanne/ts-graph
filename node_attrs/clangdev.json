{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/198232267.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"6.0.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/216616991.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"7.0.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/222630213.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/238896134.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"7.0.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/263060454.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"8.0.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/270242114.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"ArchRebuild",
    "migrator_version":1,
    "name":"aarch64 and ppc64le addition"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/335476497.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/375719183.json"
   },
   "data":{
    "bot_rerun":1581793713.1915872,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"11-init"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/49de0114-8566-4f72-946f-907a1cf71a4d.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"pypy"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "head":{
     "ref":"<this_is_not_a_branch>"
    },
    "state":"closed"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"10.0.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"clangdev",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "home":"http://llvm.org/",
   "license":"Apache-2.0 WITH LLVM-exception",
   "license_family":"Apache",
   "license_file":"LICENSE.TXT",
   "summary":"Development headers and libraries for Clang"
  },
  "build":{
   "number":"1",
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "inducer",
    "isuruf",
    "jakirkham",
    "SylvainCorlay",
    "timsnyder",
    "inducer",
    "isuruf",
    "jakirkham",
    "SylvainCorlay",
    "timsnyder",
    "inducer",
    "isuruf",
    "jakirkham",
    "SylvainCorlay",
    "timsnyder"
   ]
  },
  "outputs":[
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clangdev",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "ninja"
     ],
     "host":[
      "clang",
      "clangxx",
      "clang-tools",
      "libclang",
      "llvmdev ==10.0.0"
     ],
     "run":[
      "clang",
      "clangxx",
      "clang-tools",
      "libclang",
      "llvmdev ==10.0.0"
     ]
    },
    "script":"install_clangdev.bat",
    "test":{
     "commands":[
      "if not exist %LIBRARY_INC%\\\\clang/Config/config.h exit 1",
      "if not exist %LIBRARY_LIB%\\\\clangAST.lib exit 1"
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"libclang",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "ninja"
     ],
     "host":[
      "llvmdev ==10.0.0",
      "llvm ==10.0.0",
      "clang"
     ],
     "run":null
    },
    "script":"install_libclang.bat",
    "test":{
     "commands":[
      "if not exist %LIBRARY_BIN%\\\\libclang.dll exit 1"
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clang",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "ninja"
     ],
     "host":[
      "llvmdev ==10.0.0",
      "llvm ==10.0.0"
     ],
     "run":null,
     "run_constrained":[
      "clangdev 10.0.0",
      "clangxx 10.0.0",
      "clang-tools 10.0.0",
      "llvm-tools 10.0.0"
     ]
    },
    "script":"install_clang.bat",
    "test":{
     "commands":[
      "clang --version",
      "clang-cl --version",
      "clang-cpp --version",
      "if not exist %LIBRARY_LIB%\\\\clang\\\\10.0.0\\\\include\\\\stdatomic.h exit 1"
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clangxx",
    "requirements":{
     "host":[
      "clang"
     ],
     "run":[
      "clang"
     ]
    },
    "script":"install_clangxx.bat",
    "test":{
     "commands":[
      "clang++ --version",
      "clang++ -v -c mytest.cxx"
     ],
     "files":[
      "mytest.cxx"
     ],
     "requires":[
      "cxx_compiler_stub"
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clang-tools",
    "requirements":{
     "build":[
      "python >3",
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "ninja"
     ],
     "host":[
      "clang",
      "clangxx",
      "libclang",
      "llvmdev ==10.0.0",
      "llvm ==10.0.0"
     ],
     "run":[
      "clang",
      "clangxx"
     ],
     "run_constrained":[
      "clangdev 10.0.0"
     ]
    },
    "script":"install_clang_tools.bat",
    "test":{
     "commands":[
      "clang-check --version",
      "clang-tidy --version"
     ]
    }
   },
   {
    "build":{
     "noarch":"python",
     "skip":true,
     "string":"_h_1",
     "track_features":null
    },
    "name":"python-clang",
    "requirements":{
     "host":[
      "python"
     ],
     "run":[
      "python",
      "libclang ==10.0.0"
     ]
    },
    "script":"build_python_bindings.sh",
    "test":{
     "commands":[
      "cd bindings/python",
      "cp tests/cindex/util.py tests",
      "nosetests -v"
     ],
     "imports":[
      "clang",
      "clang.cindex"
     ],
     "requires":[
      "nose"
     ],
     "source_files":[
      "bindings/python/tests",
      "bindings/python/examples/cindex"
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clangdev",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "make"
     ],
     "host":[
      "clang",
      "clangxx",
      "clang-tools",
      "libclang",
      "libcxx",
      "llvmdev ==10.0.0"
     ],
     "run":[
      "clang",
      "clangxx",
      "clang-tools",
      "libclang",
      "libcxx",
      "llvmdev ==10.0.0"
     ]
    },
    "script":"install_clangdev.sh",
    "test":{
     "commands":[
      "test -f \"$PREFIX/include/clang/Config/config.h\"",
      "test -f \"$PREFIX/lib/libclangAST.a\""
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"libclang",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "make"
     ],
     "host":[
      "libcxx",
      "llvmdev ==10.0.0",
      "llvm ==10.0.0",
      "clang"
     ],
     "run":[
      "libcxx"
     ]
    },
    "script":"install_libclang.sh",
    "test":{
     "commands":[
      "test -f \"$PREFIX/lib/libclang.dylib\""
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clang",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "libcxx",
      "cmake >=3.4.3",
      "make"
     ],
     "host":[
      "libcxx",
      "llvmdev ==10.0.0",
      "llvm ==10.0.0"
     ],
     "run":[
      "libcxx"
     ],
     "run_constrained":[
      "clangdev 10.0.0",
      "clangxx 10.0.0",
      "clang-tools 10.0.0",
      "llvm-tools 10.0.0"
     ]
    },
    "script":"install_clang.sh",
    "test":{
     "commands":[
      "clang --version",
      "clang-cl --version",
      "clang-cpp --version",
      "clang-10 --version",
      "test -f \"$PREFIX/lib/libclang-cpp.dylib\"",
      "test -f \"$PREFIX/lib/clang/10.0.0/include/stdatomic.h\""
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clangxx",
    "requirements":{
     "host":[
      "clang"
     ],
     "run":[
      "clang"
     ]
    },
    "script":"install_clangxx.sh",
    "test":{
     "commands":[
      "clang++ --version",
      "clang++ -v -c mytest.cxx"
     ],
     "files":[
      "mytest.cxx"
     ],
     "requires":[
      "cxx_compiler_stub"
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clang-tools",
    "requirements":{
     "build":[
      "python >3",
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "make"
     ],
     "host":[
      "clang",
      "clangxx",
      "libclang",
      "libcxx",
      "llvmdev ==10.0.0",
      "llvm ==10.0.0"
     ],
     "run":[
      "clang",
      "clangxx",
      "libcxx"
     ],
     "run_constrained":[
      "clangdev 10.0.0"
     ]
    },
    "script":"install_clang_tools.sh",
    "test":{
     "commands":[
      "clang-check --version",
      "clang-tidy --version"
     ]
    }
   },
   {
    "build":{
     "noarch":"python",
     "string":"_h_1",
     "track_features":null
    },
    "name":"python-clang",
    "requirements":{
     "host":[
      "python"
     ],
     "run":[
      "python",
      "libclang ==10.0.0"
     ]
    },
    "script":"build_python_bindings.sh",
    "test":{
     "commands":[
      "cd bindings/python",
      "cp tests/cindex/util.py tests",
      "nosetests -v"
     ],
     "imports":[
      "clang",
      "clang.cindex"
     ],
     "requires":[
      "nose"
     ],
     "source_files":[
      "bindings/python/tests",
      "bindings/python/examples/cindex"
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clangdev",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "make"
     ],
     "host":[
      "clang",
      "clangxx",
      "clang-tools",
      "libclang",
      "llvmdev ==10.0.0"
     ],
     "run":[
      "clang",
      "clangxx",
      "clang-tools",
      "libclang",
      "llvmdev ==10.0.0"
     ]
    },
    "script":"install_clangdev.sh",
    "test":{
     "commands":[
      "test -f \"$PREFIX/include/clang/Config/config.h\"",
      "test -f \"$PREFIX/lib/libclangAST.a\""
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"libclang",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "make"
     ],
     "host":[
      "llvmdev ==10.0.0",
      "llvm ==10.0.0",
      "clang"
     ],
     "run":null
    },
    "script":"install_libclang.sh",
    "test":{
     "commands":[
      "test -f \"$PREFIX/lib/libclang.so\"",
      "test -f \"$PREFIX/lib/libclang.so.10\""
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clang",
    "requirements":{
     "build":[
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "make"
     ],
     "host":[
      "llvmdev ==10.0.0",
      "llvm ==10.0.0"
     ],
     "run":null,
     "run_constrained":[
      "clangdev 10.0.0",
      "clangxx 10.0.0",
      "clang-tools 10.0.0",
      "llvm-tools 10.0.0"
     ]
    },
    "script":"install_clang.sh",
    "test":{
     "commands":[
      "clang --version",
      "clang-cl --version",
      "clang-cpp --version",
      "clang-10 --version",
      "test -f \"$PREFIX/lib/libclang-cpp.so\"",
      "test -f \"$PREFIX/lib/libclang-cpp.so.10\"",
      "test -f \"$PREFIX/lib/clang/10.0.0/include/stdatomic.h\""
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clangxx",
    "requirements":{
     "host":[
      "clang"
     ],
     "run":[
      "clang"
     ]
    },
    "script":"install_clangxx.sh",
    "test":{
     "commands":[
      "clang++ --version",
      "clang++ -v -c mytest.cxx"
     ],
     "files":[
      "mytest.cxx"
     ],
     "requires":[
      "cxx_compiler_stub"
     ]
    }
   },
   {
    "build":{
     "string":"_h_1",
     "track_features":null
    },
    "name":"clang-tools",
    "requirements":{
     "build":[
      "python >3",
      "cxx_compiler_stub",
      "cmake >=3.4.3",
      "make"
     ],
     "host":[
      "clang",
      "clangxx",
      "libclang",
      "llvmdev ==10.0.0",
      "llvm ==10.0.0"
     ],
     "run":[
      "clang",
      "clangxx"
     ],
     "run_constrained":[
      "clangdev 10.0.0"
     ]
    },
    "script":"install_clang_tools.sh",
    "test":{
     "commands":[
      "clang-check --version",
      "clang-tidy --version"
     ]
    }
   },
   {
    "build":{
     "noarch":"python",
     "string":"_h_1",
     "track_features":null
    },
    "name":"python-clang",
    "requirements":{
     "host":[
      "python"
     ],
     "run":[
      "python",
      "libclang ==10.0.0"
     ]
    },
    "script":"build_python_bindings.sh",
    "test":{
     "commands":[
      "cd bindings/python",
      "cp tests/cindex/util.py tests",
      "nosetests -v"
     ],
     "imports":[
      "clang",
      "clang.cindex"
     ],
     "requires":[
      "nose"
     ],
     "source_files":[
      "bindings/python/tests",
      "bindings/python/examples/cindex"
     ]
    }
   }
  ],
  "package":{
   "name":"clang_packages",
   "version":"10.0.0"
  },
  "requirements":{
   "build":[
    "cxx_compiler_stub",
    "cmake >=3.4.3",
    "m2w64-xz",
    "python >3",
    "ninja",
    "cxx_compiler_stub",
    "cmake >=3.4.3",
    "python >3",
    "make",
    "cxx_compiler_stub",
    "cmake >=3.4.3",
    "python >3",
    "make"
   ],
   "host":[
    "llvmdev ==10.0.0",
    "libcxx",
    "llvmdev ==10.0.0",
    "llvmdev ==10.0.0"
   ]
  },
  "source":[
   {
    "folder":".",
    "patches":[
     "patches/0001-Find-conda-gcc-installation.patch",
     "patches/0002-Fix-sysroot-detection-for-linux.patch",
     "patches/0002-clang-add-conda-specific-env-var-CONDA_BUILD_SYSROOT.patch",
     "patches/0003-clang-Fix-normalizeProgramName-s-handling-of-dots-ou.patch",
     "patches/0001-Set-VERSION-in-osx-as-well.patch"
    ],
    "sha256":"885b062b00e903df72631c5f98b9579ed1ed2790f74e5646b4234fa084eacb21",
    "url":"https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang-10.0.0.src.tar.xz"
   },
   {
    "folder":"tools/extra",
    "sha256":"acdf8cf6574b40e6b1dabc93e76debb84a9feb6f22970126b04d4ba18b92911c",
    "url":"https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang-tools-extra-10.0.0.src.tar.xz"
   },
   {
    "folder":".",
    "patches":[
     "patches/0001-Find-conda-gcc-installation.patch",
     "patches/0002-Fix-sysroot-detection-for-linux.patch",
     "patches/0002-clang-add-conda-specific-env-var-CONDA_BUILD_SYSROOT.patch",
     "patches/0003-clang-Fix-normalizeProgramName-s-handling-of-dots-ou.patch",
     "patches/0001-Set-VERSION-in-osx-as-well.patch"
    ],
    "sha256":"885b062b00e903df72631c5f98b9579ed1ed2790f74e5646b4234fa084eacb21",
    "url":"https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang-10.0.0.src.tar.xz"
   },
   {
    "folder":"tools/extra",
    "sha256":"acdf8cf6574b40e6b1dabc93e76debb84a9feb6f22970126b04d4ba18b92911c",
    "url":"https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang-tools-extra-10.0.0.src.tar.xz"
   },
   {
    "folder":".",
    "patches":[
     "patches/0001-Find-conda-gcc-installation.patch",
     "patches/0002-Fix-sysroot-detection-for-linux.patch",
     "patches/0002-clang-add-conda-specific-env-var-CONDA_BUILD_SYSROOT.patch",
     "patches/0003-clang-Fix-normalizeProgramName-s-handling-of-dots-ou.patch",
     "patches/0001-Set-VERSION-in-osx-as-well.patch"
    ],
    "sha256":"885b062b00e903df72631c5f98b9579ed1ed2790f74e5646b4234fa084eacb21",
    "url":"https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang-10.0.0.src.tar.xz"
   },
   {
    "folder":"tools/extra",
    "sha256":"acdf8cf6574b40e6b1dabc93e76debb84a9feb6f22970126b04d4ba18b92911c",
    "url":"https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang-tools-extra-10.0.0.src.tar.xz"
   }
  ],
  "test":{
   "commands":[
    "%LIBRARY_BIN%/clang -v -c mytest.c",
    "if not exist %LIBRARY_INC%\\\\clang\\\\Lex\\\\Lexer.h exit 1",
    "$PREFIX/bin/clang --version",
    "$PREFIX/bin/clang++ --version",
    "$PREFIX/bin/clang-check --version",
    "$PREFIX/bin/clang -v -c mytest.c",
    "test -f $PREFIX/include/clang/Lex/Lexer.h",
    "test -f $PREFIX/lib/libclangBasic.a",
    "$PREFIX/bin/clang --version",
    "$PREFIX/bin/clang++ --version",
    "$PREFIX/bin/clang-check --version",
    "$PREFIX/bin/clang -v -c mytest.c",
    "test -f $PREFIX/include/clang/Lex/Lexer.h",
    "test -f $PREFIX/lib/libclangBasic.a"
   ],
   "files":[
    "mytest.c",
    "mytest.c",
    "mytest.c"
   ],
   "requires":[
    "cxx_compiler_stub",
    "cmake >=3.4.3",
    "cxx_compiler_stub",
    "cmake >=3.4.3",
    "cxx_compiler_stub",
    "cmake >=3.4.3"
   ]
  }
 },
 "name":"clang_packages",
 "new_version":"10.0.0",
 "outputs_names":[
  "clang",
  "clang-tools",
  "clangdev",
  "clangxx",
  "libclang",
  "python-clang"
 ],
 "pinning_version":"2020.03.24",
 "raw_meta_yaml":"{% set version = \"10.0.0\" %}\n{% set major_version = version.split(\".\")[0] %}\n{% set build_number = 1 %}\n\npackage:\n  name: clang_packages\n  version: {{ version }}\n\nsource:\n  - url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version }}/clang-{{ version }}.src.tar.xz\n    sha256: 885b062b00e903df72631c5f98b9579ed1ed2790f74e5646b4234fa084eacb21\n    patches:\n      - patches/0001-Find-conda-gcc-installation.patch\n      - patches/0002-Fix-sysroot-detection-for-linux.patch\n      - patches/0002-clang-add-conda-specific-env-var-CONDA_BUILD_SYSROOT.patch\n      - patches/0003-clang-Fix-normalizeProgramName-s-handling-of-dots-ou.patch\n      - patches/0001-Set-VERSION-in-osx-as-well.patch\n      #- patches/amd-roc-2.7.0.diff   # [variant != \"hcc\"]\n      #- patches/amd-roc-hcc-2.7.0.diff  # [variant == \"hcc\"]\n    folder: .\n  - url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version }}/clang-tools-extra-{{ version }}.src.tar.xz\n    sha256: acdf8cf6574b40e6b1dabc93e76debb84a9feb6f22970126b04d4ba18b92911c\n    folder: tools/extra\n\nbuild:\n  number: {{ build_number }}\n  skip: true  # [(win and vc<14) or variant==\"hcc\"]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake >=3.4.3\n    # Needed to unpack the source tarball\n    - m2w64-xz  # [win]\n    # \"compiling .pyc files\" fails without this\n    - python >3\n    # Building with ninja on windows for parallel builds\n    - ninja  # [win]\n    - make   # [unix]\n  host:\n    - libcxx {{ cxx_compiler_version }}  # [osx]\n    - llvmdev =={{ version }}\n\ntest:\n  requires:\n    - {{ compiler('cxx') }}\n    - cmake >=3.4.3\n  files:\n    - mytest.c\n  commands:\n    - $PREFIX/bin/clang --version  # [unix]\n    - $PREFIX/bin/clang++ --version  # [unix]\n    - $PREFIX/bin/clang-check --version  # [unix]\n\n    - $PREFIX/bin/clang -v -c mytest.c      # [unix]\n    - '%LIBRARY_BIN%/clang -v -c mytest.c'  # [win]\n\n    - if not exist %LIBRARY_INC%\\\\clang\\\\Lex\\\\Lexer.h exit 1  # [win]\n    - test -f $PREFIX/include/clang/Lex/Lexer.h      # [unix]\n    - test -f $PREFIX/lib/libclangBasic.a            # [unix]\n\n\noutputs:\n  - name: clangdev\n    script: install_clangdev.sh  # [unix]\n    script: install_clangdev.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja  # [win]\n        - make   # [unix]\n      host:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n        - {{ pin_subpackage(\"clangxx\", exact=True) }}\n        - {{ pin_subpackage(\"clang-tools\", exact=True) }}\n        - {{ pin_subpackage(\"libclang\", exact=True) }}\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n      run:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n        - {{ pin_subpackage(\"clangxx\", exact=True) }}\n        - {{ pin_subpackage(\"clang-tools\", exact=True) }}\n        - {{ pin_subpackage(\"libclang\", exact=True) }}\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}  # [osx]\n        - llvmdev =={{ version }}\n    test:\n      commands:\n        - test -f \"$PREFIX/include/clang/Config/config.h\"   # [unix]\n        - test -f \"$PREFIX/lib/libclangAST.a\"               # [unix]\n        - if not exist %LIBRARY_INC%\\\\clang/Config/config.h exit 1   # [win]\n        - if not exist %LIBRARY_LIB%\\\\clangAST.lib exit 1            # [win]\n\n  - name: libclang\n    script: install_libclang.sh  # [unix]\n    script: install_libclang.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja  # [win]\n        - make   # [unix]\n      host:\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n      run:\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}  # [osx]\n    test:\n      commands:\n        - test -f \"$PREFIX/lib/libclang.so\"                     # [linux]\n        - test -f \"$PREFIX/lib/libclang.so.{{ major_version }}\"   # [linux]\n        - test -f \"$PREFIX/lib/libclang.dylib\"                  # [osx]\n        - if not exist %LIBRARY_BIN%\\\\libclang.dll exit 1       # [win]\n\n  - name: clang\n    script: install_clang.sh  # [unix]\n    script: install_clang.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - libcxx                   # [osx]\n        - cmake >=3.4.3\n        - ninja  # [win]\n        - make   # [unix]\n      host:\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n      run:\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}  # [osx]\n      run_constrained:\n        - clangdev {{ version }}\n        - clangxx {{ version }}\n        - clang-tools {{ version }}\n        - llvm-tools {{ version }}\n    test:\n      commands:\n        - clang --version\n        - clang-cl --version\n        - clang-cpp --version\n        - clang-{{ major_version }} --version   # [unix]\n        - test -f \"$PREFIX/lib/libclang-cpp.so\"                     # [linux]\n        - test -f \"$PREFIX/lib/libclang-cpp.so.{{ major_version }}\"   # [linux]\n        - test -f \"$PREFIX/lib/libclang-cpp.dylib\"                  # [osx]\n        - test -f \"$PREFIX/lib/clang/{{ version }}/include/stdatomic.h\"                    # [unix]\n        - if not exist %LIBRARY_LIB%\\\\clang\\\\{{ version }}\\\\include\\\\stdatomic.h exit 1    # [win]\n\n  # Defaults provides this, so let's do the same in conda-forge\n  - name: clangxx\n    script: install_clangxx.sh  # [unix]\n    script: install_clangxx.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    requirements:\n      host:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n      run:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n    test:\n      requires:\n        - {{ compiler(\"cxx\") }}\n      files:\n        - mytest.cxx\n      commands:\n        - clang++ --version\n        - clang++ -v -c mytest.cxx\n\n  - name: clang-tools\n    script: install_clang_tools.sh  # [unix]\n    script: install_clang_tools.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    requirements:\n      build:\n        # \"compiling .pyc files\" fails without this\n        - python >3\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja  # [win]\n        - make   # [unix]\n      host:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n        - {{ pin_subpackage(\"clangxx\", exact=True) }}\n        - {{ pin_subpackage(\"libclang\", exact=True) }}\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n      run:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n        - {{ pin_subpackage(\"clangxx\", exact=True) }}\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}  # [osx]\n      run_constrained:\n        - clangdev {{ version }}\n    test:\n      commands:\n        - clang-check --version\n        - clang-tidy --version\n\n  - name: python-clang\n    build:\n      noarch: python\n      # Building this output using this recipe is only supported on unix\n      # It can still be installed on Windows as it is marked as `noarch: python`\n      skip: true  # [win or variant==\"hcc\"]\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    script: build_python_bindings.sh\n    requirements:\n      host:\n        - python\n      run:\n        - python\n        - libclang =={{ version }}\n    test:\n      requires:\n        - nose\n      source_files:\n        - bindings/python/tests\n        - bindings/python/examples/cindex\n      imports:\n        - clang\n        - clang.cindex\n      commands:\n        - cd bindings/python\n        - cp tests/cindex/util.py tests\n        - nosetests -v\n\nabout:\n  home: http://llvm.org/\n  license: Apache-2.0 WITH LLVM-exception\n  license_file: LICENSE.TXT\n  license_family: Apache\n  summary: Development headers and libraries for Clang\n\nextra:\n  recipe-maintainers:\n    - inducer\n    - isuruf\n    - jakirkham\n    - SylvainCorlay\n    - timsnyder\n",
 "req":{
  "__set__":true,
  "elements":[
   "clang",
   "clang-tools",
   "clangxx",
   "cmake",
   "cxx_compiler_stub",
   "libclang",
   "libcxx",
   "llvm",
   "llvmdev",
   "m2w64-xz",
   "make",
   "ninja",
   "python"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "cmake",
    "cxx_compiler_stub",
    "libcxx",
    "m2w64-xz",
    "make",
    "ninja",
    "python"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "clang",
    "clang-tools",
    "clangxx",
    "libclang",
    "libcxx",
    "llvm",
    "llvmdev",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "clang",
    "clang-tools",
    "clangxx",
    "libclang",
    "libcxx",
    "llvmdev",
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[
    "cmake",
    "cxx_compiler_stub",
    "nose"
   ]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.6.15",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "cmake >=3.4.3",
    "cxx_compiler_stub",
    "libcxx",
    "m2w64-xz",
    "make",
    "ninja",
    "python >3"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "clang",
    "clang-tools",
    "clangxx",
    "libclang",
    "libcxx",
    "llvm ==10.0.0",
    "llvmdev ==10.0.0",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "clang",
    "clang-tools",
    "clangxx",
    "libclang",
    "libclang ==10.0.0",
    "libcxx",
    "llvmdev ==10.0.0",
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[
    "cmake >=3.4.3",
    "cxx_compiler_stub",
    "nose"
   ]
  }
 },
 "url":"https://github.com/llvm/llvm-project/releases/download/llvmorg-8.0.1/cfe-8.0.1.src.tar.xz",
 "version":"10.0.0"
}