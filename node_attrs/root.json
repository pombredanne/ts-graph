{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/244574434.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/262315678.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"BlasRebuild",
    "migrator_version":0,
    "name":"blas2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/272580002.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Rebuild",
    "migrator_version":0,
    "name":"lz4-c-1.8.3"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/273075633.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Rebuild",
    "migrator_object_version":3,
    "migrator_version":0,
    "name":"OpenSSL"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/273673904.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Rebuild",
    "migrator_version":0,
    "name":"qt-5.9.7"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/283172172.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"6-19-01"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/289317541.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Rebuild",
    "migrator_version":0,
    "name":"gsl-2.5"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/297351895.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Rebuild",
    "migrator_version":0,
    "name":"cfitsio-3.470"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/301704013.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Rebuild",
    "migrator_version":0,
    "name":"graphviz-2.40"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/305699293.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Rebuild",
    "migrator_version":0,
    "name":"qt-5.12"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/308388665.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"GFortranOSXRebuild",
    "migrator_version":0,
    "name":"fortran_compiler_stub-7"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/337024430.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/343752060.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"libtiff-4.1.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/359278188.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"giflib52"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/361522023.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"6-19-02"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/371523785.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"gsl26"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/26a440c5-1e4e-43a7-abf6-bf72c46065c0.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"glew210"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/401537197.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"lz4_c192"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/405142428.json"
   },
   "data":{
    "bot_rerun":1587474854.3054726,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"krb51171"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/11c2517d-beef-4233-bca0-46826693538f.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"krb51171"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/2d56d514-dd1d-4d07-84b8-2e98db13da7c.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"root_base6204"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{},
 "feedstock_name":"root",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available. In most cases users should use the `root` package directly, since it adds both of these, along with compilers, Jupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
   "dev_url":"https://github.com/root-project/root/",
   "doc_url":"https://root.cern/documentation",
   "home":"https://root.cern/",
   "license":"LGPL-2.1-only",
   "license_family":"LGPL",
   "license_file":"root-source/LICENSE",
   "summary":"ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n"
  },
  "build":{
   "number":"3",
   "skip":true,
   "string":"pyh_3"
  },
  "extra":{
   "recipe-maintainers":[
    "chrisburr",
    "henryiii",
    "eguiraud",
    "egpbos",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "egpbos",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "egpbos"
   ]
  },
  "outputs":[
   {
    "build":{
     "number":"3",
     "script":"echo \"Minimal build script is required for conda to set RECIPE_DIR\"",
     "skip":true,
     "string":"pyh_3"
    },
    "name":"root-dependencies",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make"
     ],
     "host":[
      "libblas",
      "libcblas",
      "numpy",
      "afterimage",
      "cfitsio",
      "clangdev =5.0.0",
      "clang_variant * root_20191220",
      "davix",
      "fftw",
      "freetype",
      "ftgl",
      "gdk-pixbuf",
      "giflib",
      "glew",
      "gl2ps",
      "graphviz",
      "gsl",
      "libpng",
      "librsvg",
      "libtiff",
      "libxml2",
      "llvmdev ==5",
      "lz4-c",
      "openssl",
      "pcre",
      "pythia8",
      "python",
      "qt",
      "sqlite",
      "tbb",
      "tbb-devel",
      "vdt",
      "xrootd",
      "xz",
      "libcxx",
      "xxhash",
      "zlib",
      "zstd"
     ],
     "run":[
      "numpy",
      "cfitsio",
      "fftw",
      "gdk-pixbuf",
      "glew",
      "gl2ps",
      "graphviz",
      "librsvg",
      "pythia8",
      "python",
      "tbb-devel",
      "libcxx",
      "xxhash"
     ]
    },
    "test":{
     "commands":[
      "echo \"Testing is performed in the root_base and root outputs\""
     ]
    }
   },
   {
    "build":{
     "ignore_prefix_files":null,
     "ignore_run_exports":[
      "ftgl",
      "gl2ps",
      "giflib",
      "gsl",
      "krb5",
      "qt",
      "sqlite"
     ],
     "number":"3",
     "run_exports":[
      "root_base"
     ],
     "script":[
      "set -euxo pipefail",
      "find ${PREFIX}/bin -type f -maxdepth 1 > ${SRC_DIR}/initial-filelist.txt",
      "cp -rp ${PREFIX}/bin ${SRC_DIR}/initial-bin-dir",
      "${RECIPE_DIR}/build_root-base.sh",
      "mkdir ${SRC_DIR}/root-binaries/",
      "find ${PREFIX}/bin -type f -maxdepth 1 -exec \\\n  bash -c 'fn={}; if grep --quiet \"^$fn\\$\" \"${SRC_DIR}/initial-filelist.txt\"; then echo \"Skipping $fn\"; else echo \"Found new file $fn\"; mv \"$fn\" \"${SRC_DIR}/root-binaries/\"; fi' \\;\n"
     ],
     "skip":true,
     "string":"pyh_3"
    },
    "name":"root_base",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make"
     ],
     "host":[
      "libblas",
      "libcblas",
      "numpy",
      "afterimage",
      "cfitsio",
      "clangdev =5.0.0",
      "clang_variant * root_20191220",
      "davix",
      "fftw",
      "freetype",
      "ftgl",
      "gdk-pixbuf",
      "giflib",
      "glew",
      "gl2ps",
      "graphviz",
      "gsl",
      "libpng",
      "librsvg",
      "libtiff",
      "libxml2",
      "llvmdev ==5",
      "lz4-c",
      "openssl",
      "pcre",
      "pythia8",
      "python",
      "qt",
      "sqlite",
      "tbb",
      "tbb-devel",
      "vdt",
      "xrootd",
      "xz",
      "libcxx",
      "xxhash",
      "zlib",
      "zstd"
     ],
     "run":[
      "libcxx",
      "python",
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "xxhash"
     ],
     "run_constrained":[
      "cling 9999",
      "root5 9999"
     ]
    },
    "test":{
     "commands":[
      "echo \"Tested in other outputs\""
     ]
    }
   },
   {
    "build":{
     "number":"3",
     "script":[
      "set -euxo pipefail",
      "mkdir -p ${PREFIX}/bin",
      "ls ${PREFIX}/bin/",
      "cp -rp ${SRC_DIR}/root-binaries/* ${PREFIX}/bin/",
      "ls ${PREFIX}/bin/"
     ],
     "skip":true,
     "string":"pyh_3"
    },
    "name":"root-binaries",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make"
     ],
     "host":[
      "libblas",
      "libcblas",
      "numpy",
      "afterimage",
      "cfitsio",
      "davix",
      "fftw",
      "freetype",
      "ftgl",
      "gdk-pixbuf",
      "giflib",
      "glew",
      "gl2ps",
      "graphviz",
      "gsl",
      "libpng",
      "librsvg",
      "libtiff",
      "libxml2",
      "lz4-c",
      "openssl",
      "pcre",
      "pythia8",
      "python",
      "qt",
      "sqlite",
      "tbb",
      "tbb-devel",
      "vdt",
      "xrootd",
      "xz",
      "libcxx",
      "root_base",
      "xxhash",
      "zlib",
      "zstd"
     ],
     "run":[
      "root_base",
      "python",
      "xxhash"
     ]
    },
    "test":{
     "commands":[
      "root -l -b -q -x",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e '2+3; 0'",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "thisroot.sh",
      "thisroot.csh",
      "thisroot.fish",
      "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/tree/run_h1analysis.C\"",
      "python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\""
     ],
     "files":[
      "test.cpp"
     ],
     "requires":[
      "root-dependencies 6.20.4 *_3"
     ]
    }
   },
   {
    "build":{
     "number":"3",
     "script":[
      "set -euxo pipefail",
      "pwd",
      "ls",
      "echo \"Minimal build script is required for conda to set RECIPE_DIR\""
     ],
     "skip":true,
     "string":"pyh_3"
    },
    "name":"root",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make"
     ],
     "host":[
      "python"
     ],
     "run":[
      "python",
      "compilers",
      "metakernel",
      "notebook",
      "root_base",
      "root-binaries",
      "root-dependencies"
     ]
    },
    "test":{
     "commands":[
      "root -l -b -q -x",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e '2+3; 0'",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "thisroot.sh",
      "thisroot.csh",
      "thisroot.fish",
      "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/tree/run_h1analysis.C\"",
      "python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
      "ipython -c 'import JsMVA'",
      "root -l -b -q -x test.cpp++"
     ],
     "files":[
      "test.cpp"
     ],
     "imports":[
      "ROOT",
      "JupyROOT"
     ],
     "requires":[
      "ipython"
     ]
    }
   },
   {
    "build":{
     "number":"3",
     "script":"echo \"Minimal build script is required for conda to set RECIPE_DIR\"",
     "string":"pyh_3"
    },
    "name":"root-dependencies",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make"
     ],
     "host":[
      "libblas",
      "libcblas",
      "numpy",
      "afterimage",
      "cfitsio",
      "clangdev =5.0.0",
      "clang_variant * root_20191220",
      "davix",
      "fftw",
      "freetype",
      "ftgl",
      "gdk-pixbuf",
      "giflib",
      "glew",
      "gl2ps",
      "graphviz",
      "gsl",
      "krb5",
      "libpng",
      "librsvg",
      "libtiff",
      "libxml2",
      "llvmdev ==5",
      "lz4-c",
      "openssl",
      "pcre",
      "pythia8",
      "python",
      "qt",
      "sqlite",
      "tbb",
      "tbb-devel",
      "vdt",
      "xrootd",
      "xz",
      "libcxx",
      "xxhash",
      "zlib",
      "zstd"
     ],
     "run":[
      "numpy",
      "cfitsio",
      "fftw",
      "gdk-pixbuf",
      "glew",
      "gl2ps",
      "graphviz",
      "librsvg",
      "pythia8",
      "python",
      "tbb-devel",
      "libcxx",
      "xxhash"
     ]
    },
    "test":{
     "commands":[
      "echo \"Testing is performed in the root_base and root outputs\""
     ]
    }
   },
   {
    "build":{
     "ignore_prefix_files":[
      "etc/allDict.cxx.pch"
     ],
     "ignore_run_exports":[
      "ftgl",
      "gl2ps",
      "giflib",
      "gsl",
      "krb5",
      "qt",
      "sqlite"
     ],
     "number":"3",
     "run_exports":[
      "root_base"
     ],
     "script":[
      "set -euxo pipefail",
      "find ${PREFIX}/bin -type f -maxdepth 1 > ${SRC_DIR}/initial-filelist.txt",
      "cp -rp ${PREFIX}/bin ${SRC_DIR}/initial-bin-dir",
      "${RECIPE_DIR}/build_root-base.sh",
      "mkdir ${SRC_DIR}/root-binaries/",
      "find ${PREFIX}/bin -type f -maxdepth 1 -exec \\\n  bash -c 'fn={}; if grep --quiet \"^$fn\\$\" \"${SRC_DIR}/initial-filelist.txt\"; then echo \"Skipping $fn\"; else echo \"Found new file $fn\"; mv \"$fn\" \"${SRC_DIR}/root-binaries/\"; fi' \\;\n"
     ],
     "string":"pyh_3"
    },
    "name":"root_base",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make"
     ],
     "host":[
      "libblas",
      "libcblas",
      "numpy",
      "afterimage",
      "cfitsio",
      "clangdev =5.0.0",
      "clang_variant * root_20191220",
      "davix",
      "fftw",
      "freetype",
      "ftgl",
      "gdk-pixbuf",
      "giflib",
      "glew",
      "gl2ps",
      "graphviz",
      "gsl",
      "krb5",
      "libpng",
      "librsvg",
      "libtiff",
      "libxml2",
      "llvmdev ==5",
      "lz4-c",
      "openssl",
      "pcre",
      "pythia8",
      "python",
      "qt",
      "sqlite",
      "tbb",
      "tbb-devel",
      "vdt",
      "xrootd",
      "xz",
      "libcxx",
      "xxhash",
      "zlib",
      "zstd"
     ],
     "run":[
      "libcxx",
      "python",
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "xxhash"
     ],
     "run_constrained":[
      "cling 9999",
      "root5 9999"
     ]
    },
    "test":{
     "commands":[
      "echo \"Tested in other outputs\""
     ]
    }
   },
   {
    "build":{
     "number":"3",
     "script":[
      "set -euxo pipefail",
      "mkdir -p ${PREFIX}/bin",
      "ls ${PREFIX}/bin/",
      "cp -rp ${SRC_DIR}/root-binaries/* ${PREFIX}/bin/",
      "ls ${PREFIX}/bin/"
     ],
     "string":"pyh_3"
    },
    "name":"root-binaries",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make"
     ],
     "host":[
      "libblas",
      "libcblas",
      "numpy",
      "afterimage",
      "cfitsio",
      "davix",
      "fftw",
      "freetype",
      "ftgl",
      "gdk-pixbuf",
      "giflib",
      "glew",
      "gl2ps",
      "graphviz",
      "gsl",
      "krb5",
      "libpng",
      "librsvg",
      "libtiff",
      "libxml2",
      "lz4-c",
      "openssl",
      "pcre",
      "pythia8",
      "python",
      "qt",
      "sqlite",
      "tbb",
      "tbb-devel",
      "vdt",
      "xrootd",
      "xz",
      "libcxx",
      "root_base",
      "xxhash",
      "zlib",
      "zstd"
     ],
     "run":[
      "root_base",
      "python",
      "xxhash"
     ]
    },
    "test":{
     "commands":[
      "root -l -b -q -x",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e '2+3; 0'",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "echo ${CONDA_BUILD_SYSROOT}",
      "thisroot.sh",
      "thisroot.csh",
      "thisroot.fish",
      "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/tree/run_h1analysis.C\"",
      "python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\""
     ],
     "files":[
      "test.cpp"
     ],
     "requires":[
      "root-dependencies 6.20.4 *_3"
     ]
    }
   },
   {
    "build":{
     "number":"3",
     "script":[
      "set -euxo pipefail",
      "pwd",
      "ls",
      "echo \"Minimal build script is required for conda to set RECIPE_DIR\""
     ],
     "string":"pyh_3"
    },
    "name":"root",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make"
     ],
     "host":[
      "python"
     ],
     "run":[
      "python",
      "compilers",
      "metakernel",
      "notebook",
      "root_base",
      "root-binaries",
      "root-dependencies"
     ]
    },
    "test":{
     "commands":[
      "root -l -b -q -x",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e '2+3; 0'",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "echo ${CONDA_BUILD_SYSROOT}",
      "thisroot.sh",
      "thisroot.csh",
      "thisroot.fish",
      "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/tree/run_h1analysis.C\"",
      "python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
      "ipython -c 'import JsMVA'",
      "root -l -b -q -x test.cpp++"
     ],
     "files":[
      "test.cpp"
     ],
     "imports":[
      "ROOT",
      "JupyROOT"
     ],
     "requires":[
      "ipython"
     ]
    }
   },
   {
    "build":{
     "number":"3",
     "script":"echo \"Minimal build script is required for conda to set RECIPE_DIR\"",
     "string":"pyh_3"
    },
    "name":"root-dependencies",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub"
     ],
     "host":[
      "libblas",
      "libcblas",
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "numpy",
      "afterimage",
      "cfitsio",
      "clangdev =5.0.0",
      "clang_variant * root_20191220",
      "davix",
      "fftw",
      "freetype",
      "ftgl",
      "gdk-pixbuf",
      "giflib",
      "glew",
      "gl2ps",
      "graphviz",
      "gsl",
      "libglu",
      "libpng",
      "librsvg",
      "libtiff",
      "libxml2",
      "llvmdev ==5",
      "lz4-c",
      "openssl",
      "pcre",
      "pythia8",
      "python",
      "qt",
      "sqlite",
      "tbb",
      "tbb-devel",
      "vdt",
      "xorg-libx11",
      "xorg-libxau",
      "xorg-libxcursor",
      "xorg-libxext",
      "xorg-libxfixes",
      "xorg-libxft",
      "xorg-libxpm",
      "xrootd",
      "xz",
      "libcxx",
      "xxhash",
      "zlib",
      "zstd"
     ],
     "run":[
      "numpy",
      "cfitsio",
      "fftw",
      "gdk-pixbuf",
      "glew",
      "gl2ps",
      "graphviz",
      "libglu",
      "librsvg",
      "pythia8",
      "python",
      "tbb-devel",
      "xorg-libx11",
      "xorg-libxau",
      "xorg-libxcursor",
      "xorg-libxext",
      "xorg-libxft",
      "xorg-libxpm",
      "libcxx",
      "xxhash"
     ]
    },
    "test":{
     "commands":[
      "echo \"Testing is performed in the root_base and root outputs\""
     ]
    }
   },
   {
    "build":{
     "ignore_prefix_files":[
      "lib/*.pcm"
     ],
     "ignore_run_exports":[
      "ftgl",
      "gl2ps",
      "giflib",
      "gsl",
      "krb5",
      "qt",
      "sqlite"
     ],
     "number":"3",
     "run_exports":[
      "root_base"
     ],
     "script":[
      "set -euxo pipefail",
      "find ${PREFIX}/bin -type f -maxdepth 1 > ${SRC_DIR}/initial-filelist.txt",
      "cp -rp ${PREFIX}/bin ${SRC_DIR}/initial-bin-dir",
      "${RECIPE_DIR}/build_root-base.sh",
      "mkdir ${SRC_DIR}/root-binaries/",
      "find ${PREFIX}/bin -type f -maxdepth 1 -exec \\\n  bash -c 'fn={}; if grep --quiet \"^$fn\\$\" \"${SRC_DIR}/initial-filelist.txt\"; then echo \"Skipping $fn\"; else echo \"Found new file $fn\"; mv \"$fn\" \"${SRC_DIR}/root-binaries/\"; fi' \\;\n"
     ],
     "string":"pyh_3"
    },
    "name":"root_base",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub"
     ],
     "host":[
      "libblas",
      "libcblas",
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "numpy",
      "afterimage",
      "cfitsio",
      "clangdev =5.0.0",
      "clang_variant * root_20191220",
      "davix",
      "fftw",
      "freetype",
      "ftgl",
      "gdk-pixbuf",
      "giflib",
      "glew",
      "gl2ps",
      "graphviz",
      "gsl",
      "libglu",
      "libpng",
      "librsvg",
      "libtiff",
      "libxml2",
      "llvmdev ==5",
      "lz4-c",
      "openssl",
      "pcre",
      "pythia8",
      "python",
      "qt",
      "sqlite",
      "tbb",
      "tbb-devel",
      "vdt",
      "xorg-libx11",
      "xorg-libxau",
      "xorg-libxcursor",
      "xorg-libxext",
      "xorg-libxfixes",
      "xorg-libxft",
      "xorg-libxpm",
      "xrootd",
      "xz",
      "libcxx",
      "xxhash",
      "zlib",
      "zstd"
     ],
     "run":[
      "libcxx",
      "python",
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "xxhash"
     ],
     "run_constrained":[
      "cling 9999",
      "root5 9999"
     ]
    },
    "test":{
     "commands":[
      "echo \"Tested in other outputs\""
     ]
    }
   },
   {
    "build":{
     "number":"3",
     "script":[
      "set -euxo pipefail",
      "mkdir -p ${PREFIX}/bin",
      "ls ${PREFIX}/bin/",
      "cp -rp ${SRC_DIR}/root-binaries/* ${PREFIX}/bin/",
      "ls ${PREFIX}/bin/"
     ],
     "string":"pyh_3"
    },
    "name":"root-binaries",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub"
     ],
     "host":[
      "libblas",
      "libcblas",
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "numpy",
      "afterimage",
      "cfitsio",
      "davix",
      "fftw",
      "freetype",
      "ftgl",
      "gdk-pixbuf",
      "giflib",
      "glew",
      "gl2ps",
      "graphviz",
      "gsl",
      "libglu",
      "libpng",
      "librsvg",
      "libtiff",
      "libxml2",
      "lz4-c",
      "openssl",
      "pcre",
      "pythia8",
      "python",
      "qt",
      "sqlite",
      "tbb",
      "tbb-devel",
      "vdt",
      "xorg-libx11",
      "xorg-libxau",
      "xorg-libxcursor",
      "xorg-libxext",
      "xorg-libxfixes",
      "xorg-libxft",
      "xorg-libxpm",
      "xrootd",
      "xz",
      "libcxx",
      "root_base",
      "xxhash",
      "zlib",
      "zstd"
     ],
     "run":[
      "root_base",
      "python",
      "xxhash"
     ]
    },
    "test":{
     "commands":[
      "root -l -b -q -x",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e '2+3; 0'",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "thisroot.sh",
      "thisroot.csh",
      "thisroot.fish",
      "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/tree/run_h1analysis.C\"",
      "python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\""
     ],
     "files":[
      "test.cpp"
     ],
     "requires":[
      "root-dependencies 6.20.4 *_3"
     ]
    }
   },
   {
    "build":{
     "number":"3",
     "script":[
      "set -euxo pipefail",
      "pwd",
      "ls",
      "echo \"Minimal build script is required for conda to set RECIPE_DIR\""
     ],
     "string":"pyh_3"
    },
    "name":"root",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "cmake",
      "git",
      "pkg-config",
      "sed",
      "make",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub",
      "cdt_stub"
     ],
     "host":[
      "python"
     ],
     "run":[
      "python",
      "compilers",
      "metakernel",
      "notebook",
      "root_base",
      "root-binaries",
      "root-dependencies"
     ]
    },
    "test":{
     "commands":[
      "root -l -b -q -x",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e '2+3; 0'",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "thisroot.sh",
      "thisroot.csh",
      "thisroot.fish",
      "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${ROOTSYS}/tutorials/tree/run_h1analysis.C\"",
      "python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
      "ipython -c 'import JsMVA'",
      "root -l -b -q -x test.cpp++"
     ],
     "files":[
      "test.cpp"
     ],
     "imports":[
      "ROOT",
      "JupyROOT"
     ],
     "requires":[
      "ipython"
     ]
    }
   }
  ],
  "package":{
   "name":"root",
   "version":"6.20.4"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub"
   ],
   "host":[
    "libblas",
    "libcblas",
    "numpy",
    "afterimage",
    "cfitsio",
    "clangdev =5.0.0",
    "clang_variant * root_20191220",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "llvmdev ==5",
    "lz4-c",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "qt",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "libblas",
    "libcblas",
    "numpy",
    "afterimage",
    "cfitsio",
    "clangdev =5.0.0",
    "clang_variant * root_20191220",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "gl2ps",
    "graphviz",
    "gsl",
    "krb5",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "llvmdev ==5",
    "lz4-c",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "qt",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "numpy",
    "afterimage",
    "cfitsio",
    "clangdev =5.0.0",
    "clang_variant * root_20191220",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "llvmdev ==5",
    "lz4-c",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "qt",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd"
   ],
   "run":[
    "python",
    "python",
    "python"
   ]
  },
  "source":{
   "folder":"root-source",
   "patches":[
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx_python_mac_os.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch"
   ],
   "sha256":"788b0673fd67c70455a2dae769e3e6c75a113079c7ca47196aaee52fbab44843",
   "url":"https://github.com/root-project/root/archive/v6-20-04.tar.gz"
  }
 },
 "name":"root",
 "new_version":"6-20-04",
 "outputs_names":[
  "root",
  "root-binaries",
  "root-dependencies",
  "root_base"
 ],
 "pinning_version":"2020.04.21.12.59.15",
 "raw_meta_yaml":"{% set name = \"root\" %}\n{% set version = \"6.20.4\" %}\n{% set build_number = 3 %}\n{% set clang_version = \"5.0.0\" %}\n{% set clang_patches_version = \"root_20191220\" %}\n\n# WARNING: This is not a good example of a how a conda forge recipe should look\n\n{% macro test_commands() %}\n        - root -l -b -q -x\n        - root -l -b -q -x test.cpp\n        # When testing with -e, explicitly set the return code to zero\n        - root -b -l -q -x -e '2+3; 0'\n        - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'\n        - echo ${CONDA_BUILD_SYSROOT}  # [osx]\n        # # There should be no hard coded references to the SDK\n        # Check the thisroot scripts work\n        - thisroot.sh\n        - thisroot.csh\n        - thisroot.fish\n        # Test if OpenGL is working\n        - root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'\n        # This test will fail due to lack of graphics support but try it anyway\n        # It should exit with \"TEveException: TEveManager::Create ROOT is running in batch mode.\"\n        - root -b -l -q -x \"${ROOTSYS}/tutorials/eve/geom_lhcb.C\" || true\n        # This tutorial uses davix to access a ROOT file over HTTP\n        - root -b -l -q -x \"${ROOTSYS}/tutorials/tree/run_h1analysis.C\"\n        - python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"\n{% endmacro -%}\n\npackage:\n  name: root\n  version: {{ version }}\n\nsource:\n  # git_url: {{ os.environ.get(\"ROOT_JENKINS_GIT_URL\", \"https://github.com/root-project/root.git\") }}\n  # git_rev: v6-20-00-patches\n  url: https://github.com/root-project/root/archive/v{{ '-'.join(version.split('.')[:-1] + [version.split('.')[-1].rjust(2, '0')]) }}.tar.gz\n  sha256: 788b0673fd67c70455a2dae769e3e6c75a113079c7ca47196aaee52fbab44843\n  folder: root-source\n  patches:\n    - patches/root-x.xx.xx_cling-runtime-sysroot.patch\n    - patches/root-x.xx.xx_python_mac_os.patch  # [osx]\n    - patches/root-x.xx.xx-copy-abspath-headers.patch  # [osx]\n    - patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch  # [osx]\n\nbuild:\n  number: {{ build_number }}\n  skip: True  # [win]\n  string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}\n\n# Required for conda to generate the correct build matrix\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('fortran') }}\n    - cmake\n    - git\n    - pkg-config\n    - sed\n    - make\n    # Required for OpenGL support\n    # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - {{ cdt('mesa-dri-drivers') }}  # [linux]\n    - {{ cdt('libselinux') }}  # [linux]\n    - {{ cdt('libxdamage') }}  # [linux]\n    - {{ cdt('libxxf86vm') }}  # [linux]\n  host:\n    - libblas\n    - libcblas\n    - {{ compiler('c') }}  # [linux]\n    - {{ compiler('cxx') }}  # [linux]\n    - {{ compiler('fortran') }}  # [linux]\n    - numpy\n    - afterimage\n    - cfitsio\n    - clangdev ={{ clang_version }}\n    - clang_variant * {{ clang_patches_version }}\n    - davix\n    - fftw\n    - freetype\n    - ftgl\n    - gdk-pixbuf\n    - giflib\n    - glew\n    - gl2ps\n    - graphviz\n    - gsl\n    - krb5  # [osx]\n    - libglu  # [linux]\n    - libpng\n    - librsvg\n    - libtiff\n    - libxml2\n    - llvmdev ==5\n    - lz4-c\n    # - mysql\n    - openssl\n    - pcre\n    # - postgresql\n    - pythia8\n    - python\n    - qt\n    - sqlite\n    - tbb\n    - tbb-devel\n    - vdt\n    - xorg-libx11  # [linux]\n    - xorg-libxau  # [linux]\n    - xorg-libxcursor  # [linux]\n    - xorg-libxext  # [linux]\n    - xorg-libxfixes  # [linux]\n    - xorg-libxft  # [linux]\n    - xorg-libxpm  # [linux]\n    - xrootd\n    - xz\n    # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used\n    - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n    - xxhash\n    - zlib\n    - zstd\n  run:\n    - python\n\noutputs:\n  - name: root-dependencies\n    build:\n      number: {{ build_number }}\n      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}\n      skip: True  # [win]\n      script: echo \"Minimal build script is required for conda to set RECIPE_DIR\"\n    requirements:\n      # Include the build dependencies to ensure the build string is correct\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - cmake\n        - git\n        - pkg-config\n        - sed\n        - make\n        # Required for OpenGL support\n        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n        - {{ cdt('mesa-libgl-devel') }}  # [linux]\n        - {{ cdt('mesa-dri-drivers') }}  # [linux]\n        - {{ cdt('libselinux') }}  # [linux]\n        - {{ cdt('libxdamage') }}  # [linux]\n        - {{ cdt('libxxf86vm') }}  # [linux]\n      # Include the host dependencies so we pick up any pinning and run_exports\n      host:\n        - libblas\n        - libcblas\n        - {{ compiler('c') }}  # [linux]\n        - {{ compiler('cxx') }}  # [linux]\n        - {{ compiler('fortran') }}  # [linux]\n        - numpy\n        - afterimage\n        - cfitsio\n        - clangdev ={{ clang_version }}\n        - clang_variant * {{ clang_patches_version }}\n        - davix\n        - fftw\n        - freetype\n        - ftgl\n        - gdk-pixbuf\n        - giflib\n        - glew\n        - gl2ps\n        - graphviz\n        - gsl\n        - krb5  # [osx]\n        - libglu  # [linux]\n        - libpng\n        - librsvg\n        - libtiff\n        - libxml2\n        - llvmdev ==5\n        - lz4-c\n        # - mysql\n        - openssl\n        - pcre\n        # - postgresql\n        - pythia8\n        - python\n        - qt\n        - sqlite\n        - tbb\n        - tbb-devel\n        - vdt\n        - xorg-libx11  # [linux]\n        - xorg-libxau  # [linux]\n        - xorg-libxcursor  # [linux]\n        - xorg-libxext  # [linux]\n        - xorg-libxfixes  # [linux]\n        - xorg-libxft  # [linux]\n        - xorg-libxpm  # [linux]\n        - xrootd\n        - xz\n        # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used\n        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n        - xxhash\n        - zlib\n        - zstd\n      run:\n        - {{ pin_compatible('numpy') }}\n        - cfitsio\n        - fftw\n        - gdk-pixbuf\n        - glew\n        - gl2ps\n        - graphviz\n        - libglu  # [linux]\n        - librsvg\n        - pythia8\n        - python\n        - tbb-devel\n        - xorg-libx11  # [linux]\n        - xorg-libxau  # [linux]\n        - xorg-libxcursor  # [linux]\n        - xorg-libxext  # [linux]\n        - xorg-libxft  # [linux]\n        - xorg-libxpm  # [linux]\n        # FIXME: Required to ensure a consistent etc/allDict.cxx.pch\n        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n        - {{ pin_compatible('xxhash', max_pin='x.x.x') }}\n    test:\n      commands:\n        - echo \"Testing is performed in the root_base and root outputs\"\n\n  # An underscore is required here to ensure it is built after root-dependencies (required for testing)\n  - name: root_base\n    build:\n      number: {{ build_number }}\n      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}\n      skip: True  # [win]\n      script:\n        - set -euxo pipefail\n        - find ${PREFIX}/bin -type f -maxdepth 1 > ${SRC_DIR}/initial-filelist.txt\n        - cp -rp ${PREFIX}/bin ${SRC_DIR}/initial-bin-dir\n        # Copy the new files in ${PREFIX}/bin to a dedicated directory\n        - ${RECIPE_DIR}/build_root-base.sh\n        - mkdir ${SRC_DIR}/root-binaries/\n        - |\n          find ${PREFIX}/bin -type f -maxdepth 1 -exec \\\n            bash -c 'fn={}; if grep --quiet \"^$fn\\$\" \"${SRC_DIR}/initial-filelist.txt\"; then echo \"Skipping $fn\"; else echo \"Found new file $fn\"; mv \"$fn\" \"${SRC_DIR}/root-binaries/\"; fi' \\;\n      run_exports:\n        # https://abi-laboratory.pro/?view=timeline&l=root\n        - {{ pin_subpackage('root_base', max_pin='x.x') }}\n      ignore_prefix_files:\n        # Needs to be different until macOS supports runtime_cxxmodules=ON\n        - etc/allDict.cxx.pch  # [osx]\n        - lib/*.pcm  # [linux]\n      # Taken from \"conda render ./recipe/ -m .ci_support/osx_python3.7.yaml\"\n      # Sorted and commented run_exports that we want to keep\n      # TODO: This will need updating occasionally\n      ignore_run_exports:\n        # - afterimage\n        # - davix\n        # - freetype\n        - ftgl\n        - gl2ps\n        - giflib\n        - gsl\n        - krb5\n        # - libblas\n        # - libcblas\n        # - libcxx\n        # - libgfortran\n        # - libpng\n        # - libtiff\n        # - libxml2\n        # - lz4-c\n        # - openssl\n        # - pcre\n        - qt\n        - sqlite\n        # - tbb\n        # - vdt\n        # - xrootd\n        # - xz\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - cmake\n        - git\n        - pkg-config\n        - sed\n        - make\n        # Required for OpenGL support\n        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n        - {{ cdt('mesa-libgl-devel') }}  # [linux]\n        - {{ cdt('mesa-dri-drivers') }}  # [linux]\n        - {{ cdt('libselinux') }}  # [linux]\n        - {{ cdt('libxdamage') }}  # [linux]\n        - {{ cdt('libxxf86vm') }}  # [linux]\n      host:\n        - libblas\n        - libcblas\n        - {{ compiler('c') }}  # [linux]\n        - {{ compiler('cxx') }}  # [linux]\n        - {{ compiler('fortran') }}  # [linux]\n        - numpy\n        - afterimage\n        - cfitsio\n        - clangdev ={{ clang_version }}\n        - clang_variant * {{ clang_patches_version }}\n        - davix\n        - fftw\n        - freetype\n        - ftgl\n        - gdk-pixbuf\n        - giflib\n        - glew\n        - gl2ps\n        - graphviz\n        - gsl\n        - krb5  # [osx]\n        - libglu  # [linux]\n        - libpng\n        - librsvg\n        - libtiff\n        - libxml2\n        - llvmdev ==5\n        - lz4-c\n        # - mysql\n        - openssl\n        - pcre\n        # - postgresql\n        - pythia8\n        - python\n        - qt\n        - sqlite\n        - tbb\n        - tbb-devel\n        - vdt\n        - xorg-libx11  # [linux]\n        - xorg-libxau  # [linux]\n        - xorg-libxcursor  # [linux]\n        - xorg-libxext  # [linux]\n        - xorg-libxfixes  # [linux]\n        - xorg-libxft  # [linux]\n        - xorg-libxpm  # [linux]\n        - xrootd\n        - xz\n        # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used\n        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n        - xxhash\n        - zlib\n        - zstd\n      run:\n        # FIXME: Required to ensure a consistent etc/allDict.cxx.pch\n        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n        - python\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - {{ pin_compatible('xxhash', max_pin='x.x.x') }}\n      run_constrained:\n        # Items listed here conflict with ROOT\n        # FIXME Add support in ROOT for building with an external cling\n        - cling 9999\n        - root5 9999\n    test:\n      commands:\n        - echo \"Tested in other outputs\"\n\n  - name: root-binaries\n    build:\n      number: {{ build_number }}\n      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}\n      skip: True  # [win]\n      script:\n        - set -euxo pipefail\n        # Copy the executables back into ${PREFIX}/bin\n        # This is done to avoid users getting broken binaries from root_base\n        - mkdir -p ${PREFIX}/bin\n        - ls ${PREFIX}/bin/\n        - cp -rp ${SRC_DIR}/root-binaries/* ${PREFIX}/bin/\n        - ls ${PREFIX}/bin/\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - cmake\n        - git\n        - pkg-config\n        - sed\n        - make\n        # Required for OpenGL support\n        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n        - {{ cdt('mesa-libgl-devel') }}  # [linux]\n        - {{ cdt('mesa-dri-drivers') }}  # [linux]\n        - {{ cdt('libselinux') }}  # [linux]\n        - {{ cdt('libxdamage') }}  # [linux]\n        - {{ cdt('libxxf86vm') }}  # [linux]\n      # Have to copy the host dependencies in order to be able to also install root_base\n      host:\n        - libblas\n        - libcblas\n        - {{ compiler('c') }}  # [linux]\n        - {{ compiler('cxx') }}  # [linux]\n        - {{ compiler('fortran') }}  # [linux]\n        - numpy\n        - afterimage\n        - cfitsio\n        # These not required as they're are statically linked in libCling. They also cannot\n        # be installed in the same environment as root_base due to the compiler constraint\n        # - clangdev ={{ clang_version }}\n        # - clang_variant * {{ clang_patches_version }}\n        # - llvmdev ==5\n        - davix\n        - fftw\n        - freetype\n        - ftgl\n        - gdk-pixbuf\n        - giflib\n        - glew\n        - gl2ps\n        - graphviz\n        - gsl\n        - krb5  # [osx]\n        - libglu  # [linux]\n        - libpng\n        - librsvg\n        - libtiff\n        - libxml2\n        - lz4-c\n        # - mysql\n        - openssl\n        - pcre\n        # - postgresql\n        - pythia8\n        - python\n        - qt\n        - sqlite\n        - tbb\n        - tbb-devel\n        - vdt\n        - xorg-libx11  # [linux]\n        - xorg-libxau  # [linux]\n        - xorg-libxcursor  # [linux]\n        - xorg-libxext  # [linux]\n        - xorg-libxfixes  # [linux]\n        - xorg-libxft  # [linux]\n        - xorg-libxpm  # [linux]\n        - xrootd\n        - xz\n        # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used\n        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n        - {{ pin_subpackage('root_base', exact=True) }}\n        - xxhash\n        - zlib\n        - zstd\n      run:\n        - {{ pin_subpackage('root_base', exact=True) }}\n        - python\n        - {{ pin_compatible('xxhash', max_pin='x.x.x') }}\n    test:\n      files:\n        - test.cpp\n      requires:\n        - root-dependencies {{ version }} *_{{ build_number }}\n      commands: {{- test_commands() }}\n\n  - name: root\n    build:\n      number: {{ build_number }}\n      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}\n      skip: True  # [win]\n      script:\n        - set -euxo pipefail\n        - pwd\n        - ls\n        - echo \"Minimal build script is required for conda to set RECIPE_DIR\"\n    requirements:\n      # Include the build dependencies and python to ensure the build string is correct\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - cmake\n        - git\n        - pkg-config\n        - sed\n        - make\n        # Required for OpenGL support\n        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n        - {{ cdt('mesa-libgl-devel') }}  # [linux]\n        - {{ cdt('mesa-dri-drivers') }}  # [linux]\n        - {{ cdt('libselinux') }}  # [linux]\n        - {{ cdt('libxdamage') }}  # [linux]\n        - {{ cdt('libxxf86vm') }}  # [linux]\n      host:\n        - python\n      run:\n        - python\n        - compilers  # This package is hostile to how conda-build manages compilers\n        - metakernel\n        - notebook\n        - {{ pin_subpackage('root_base', exact=True) }}\n        - {{ pin_subpackage('root-binaries', exact=True) }}\n        - {{ pin_subpackage('root-dependencies', exact=True) }}\n    test:\n      files:\n        - test.cpp\n      requires:\n        - ipython\n      imports:\n        - ROOT\n        - JupyROOT\n      commands: {{- test_commands()  }}\n        - ipython -c 'import JsMVA'\n        # This command only works if the compilers are available\n        - root -l -b -q -x test.cpp++\n\nabout:\n  home: https://root.cern/\n  license: LGPL-2.1-only\n  license_family: LGPL\n  license_file: root-source/LICENSE\n  doc_url: https://root.cern/documentation\n  dev_url: https://github.com/root-project/root/\n  summary: |\n      ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\n      processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\n      languages such as Python and R.\n  description: |\n      Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\n      on. Here are a few things to try:\n\n      * `root`: you can start up a session and see the splash screen; Control-D to exit.\n      * `python` followed by `import ROOT` will load PyROOT.\n      * `root --notebook` will start a notebook server with a ROOT kernel choice.\n      * `rootbrowse` will open a TBrowser session so you can look through files.\n      * `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n      * `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n      * `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\n      See the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\n      The ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n      `$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\n      scripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\n      There is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\n      having a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available. In most cases users should use the `root` package directly, since it adds both of these, along with compilers, Jupyter, and a few other things to facilitate using ROOT or PyROOT.\n\n      ROOT was built with and will report `-std=c++17` from `root-config`.\n\nextra:\n  recipe-maintainers:\n    - chrisburr\n    - henryiii\n    - eguiraud\n    - egpbos\n",
 "req":{
  "__set__":true,
  "elements":[
   "afterimage",
   "c_compiler_stub",
   "cdt_stub",
   "cfitsio",
   "clang_variant",
   "clangdev",
   "cmake",
   "compilers",
   "cxx_compiler_stub",
   "davix",
   "fftw",
   "fortran_compiler_stub",
   "freetype",
   "ftgl",
   "gdk-pixbuf",
   "giflib",
   "git",
   "gl2ps",
   "glew",
   "graphviz",
   "gsl",
   "krb5",
   "libblas",
   "libcblas",
   "libcxx",
   "libglu",
   "libpng",
   "librsvg",
   "libtiff",
   "libxml2",
   "llvmdev",
   "lz4-c",
   "make",
   "metakernel",
   "notebook",
   "numpy",
   "openssl",
   "pcre",
   "pkg-config",
   "pythia8",
   "python",
   "qt",
   "root-binaries",
   "root-dependencies",
   "root_base",
   "sed",
   "sqlite",
   "tbb",
   "tbb-devel",
   "vdt",
   "xorg-libx11",
   "xorg-libxau",
   "xorg-libxcursor",
   "xorg-libxext",
   "xorg-libxfixes",
   "xorg-libxft",
   "xorg-libxpm",
   "xrootd",
   "xxhash",
   "xz",
   "zlib",
   "zstd"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "git",
    "make",
    "pkg-config",
    "sed"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "afterimage",
    "c_compiler_stub",
    "cfitsio",
    "clang_variant",
    "clangdev",
    "cxx_compiler_stub",
    "davix",
    "fftw",
    "fortran_compiler_stub",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "gl2ps",
    "glew",
    "graphviz",
    "gsl",
    "krb5",
    "libblas",
    "libcblas",
    "libcxx",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "llvmdev",
    "lz4-c",
    "numpy",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "qt",
    "root_base",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xxhash",
    "xz",
    "zlib",
    "zstd"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cfitsio",
    "compilers",
    "cxx_compiler_stub",
    "fftw",
    "fortran_compiler_stub",
    "gdk-pixbuf",
    "gl2ps",
    "glew",
    "graphviz",
    "libcxx",
    "libglu",
    "librsvg",
    "metakernel",
    "notebook",
    "numpy",
    "pythia8",
    "python",
    "root-binaries",
    "root-dependencies",
    "root_base",
    "tbb-devel",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxft",
    "xorg-libxpm",
    "xxhash"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[
    "ipython",
    "root-dependencies"
   ]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.6.16",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "git",
    "make",
    "pkg-config",
    "sed"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "afterimage",
    "c_compiler_stub",
    "cfitsio",
    "clang_variant * root_20191220",
    "clangdev =5.0.0",
    "cxx_compiler_stub",
    "davix",
    "fftw",
    "fortran_compiler_stub",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "gl2ps",
    "glew",
    "graphviz",
    "gsl",
    "krb5",
    "libblas",
    "libcblas",
    "libcxx",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "llvmdev ==5",
    "lz4-c",
    "numpy",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "qt",
    "root_base",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xxhash",
    "xz",
    "zlib",
    "zstd"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cfitsio",
    "compilers",
    "cxx_compiler_stub",
    "fftw",
    "fortran_compiler_stub",
    "gdk-pixbuf",
    "gl2ps",
    "glew",
    "graphviz",
    "libcxx",
    "libglu",
    "librsvg",
    "metakernel",
    "notebook",
    "numpy",
    "pythia8",
    "python",
    "root-binaries",
    "root-dependencies",
    "root_base",
    "tbb-devel",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxft",
    "xorg-libxpm",
    "xxhash"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[
    "ipython",
    "root-dependencies 6.20.4 *_3"
   ]
  }
 },
 "url":"https://github.com/root-project/root/archive/v6-18-00.tar.gz",
 "version":"6.20.4"
}