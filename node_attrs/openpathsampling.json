{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/354880144.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/369754941.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.2.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{},
 "feedstock_name":"openpathsampling",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"OpenPathSampling is a library for trajectory-based rare events\nsimulations, including transition path sampling, transition interface\nsampling, and committor simulations. Note that for real-world usage, you\nmust also install one of the powerful molecular dynamics engines that\nOPS interfaces with, such as OpenMM or Gromacs. If you install those\nseprately, OPS will automatically support your installation of them.\n",
   "dev_url":"https://github.com/openpathsampling/openpathsampling",
   "doc_url":"https://openpathsampling.org",
   "home":"https://github.com/openpathsampling/openpathsampling",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE",
   "summary":"A Python package for path sampling simulations"
  },
  "build":{
   "number":"0",
   "script":"MPLBACKEND=Agg  -m pip install . -vv",
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "dwhswenson",
    "dwhswenson",
    "dwhswenson"
   ]
  },
  "package":{
   "name":"openpathsampling",
   "version":"1.2.0"
  },
  "requirements":{
   "host":[
    "python",
    "pip",
    "python",
    "pip",
    "python",
    "pip"
   ],
   "run":[
    "python",
    "future",
    "psutil",
    "numpy",
    "scipy",
    "pandas",
    "matplotlib-base",
    "networkx",
    "netcdf4",
    "svgwrite",
    "ujson",
    "mdtraj",
    "python",
    "future",
    "psutil",
    "numpy",
    "scipy",
    "pandas",
    "matplotlib-base",
    "networkx",
    "netcdf4",
    "svgwrite",
    "ujson",
    "mdtraj",
    "python",
    "future",
    "psutil",
    "numpy",
    "scipy",
    "pandas",
    "matplotlib-base",
    "networkx",
    "netcdf4",
    "svgwrite",
    "ujson",
    "mdtraj"
   ]
  },
  "source":{
   "sha256":"7efc95b18c0f4fc11e901394c6dd781ff28f1fdf522b2f7a2946934b8f423f2f",
   "url":"https://pypi.io/packages/source/o/openpathsampling/openpathsampling-1.2.0.tar.gz"
  },
  "test":{
   "imports":[
    "openpathsampling",
    "openpathsampling",
    "openpathsampling"
   ]
  }
 },
 "name":"openpathsampling",
 "new_version":"1.2.0",
 "pinning_version":"2020.01.27",
 "raw_meta_yaml":"{% set name = \"openpathsampling\" %}\n{% set version = \"1.2.0\" %}\n{% set sha256 = \"7efc95b18c0f4fc11e901394c6dd781ff28f1fdf522b2f7a2946934b8f423f2f\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  # note to self: if we add win support, switch skip line to noarch: python\n  skip: True  # [win]\n  script: \"MPLBACKEND=Agg {{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  host:\n    - python\n    - pip\n  run:\n    - python\n    - future\n    - psutil\n    - numpy\n    - scipy\n    - pandas\n    - matplotlib-base\n    - networkx\n    - netcdf4\n    - svgwrite\n    - ujson\n    - mdtraj\n\ntest:\n  imports:\n    - openpathsampling\n\nabout:\n  home: https://github.com/openpathsampling/openpathsampling\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'A Python package for path sampling simulations'\n\n  # The remaining entries in this section are optional, but recommended.\n  description: |\n    OpenPathSampling is a library for trajectory-based rare events\n    simulations, including transition path sampling, transition interface\n    sampling, and committor simulations. Note that for real-world usage, you\n    must also install one of the powerful molecular dynamics engines that\n    OPS interfaces with, such as OpenMM or Gromacs. If you install those\n    seprately, OPS will automatically support your installation of them.\n  doc_url: https://openpathsampling.org\n  dev_url: https://github.com/openpathsampling/openpathsampling\n\nextra:\n  recipe-maintainers:\n    - dwhswenson\n",
 "req":{
  "__set__":true,
  "elements":[
   "future",
   "matplotlib-base",
   "mdtraj",
   "netcdf4",
   "networkx",
   "numpy",
   "pandas",
   "pip",
   "psutil",
   "python",
   "scipy",
   "svgwrite",
   "ujson"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "future",
    "matplotlib-base",
    "mdtraj",
    "netcdf4",
    "networkx",
    "numpy",
    "pandas",
    "psutil",
    "python",
    "scipy",
    "svgwrite",
    "ujson"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"3.6.6",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "future",
    "matplotlib-base",
    "mdtraj",
    "netcdf4",
    "networkx",
    "numpy",
    "pandas",
    "psutil",
    "python",
    "scipy",
    "svgwrite",
    "ujson"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://pypi.io/packages/source/o/openpathsampling/openpathsampling-1.1.0.tar.gz",
 "version":"1.2.0"
}