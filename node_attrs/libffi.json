{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/215262803.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/253992204.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"ArchRebuild",
    "migrator_version":1,
    "name":"aarch64 and ppc64le addition"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/344822122.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"3.3"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35",
  "provider":{
   "linux_aarch64":"azure",
   "linux_ppc64le":"azure",
   "win":"azure"
  }
 },
 "feedstock_name":"libffi",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"The libffi library provides a portable, high level programming interface\nto various calling conventions. This allows a programmer to call any\nfunction specified by a call interface description at run-time.\n",
   "dev_url":"https://github.com/libffi/libffi",
   "doc_url":"https://sourceware.org/libffi/",
   "home":"https://sourceware.org/libffi/",
   "license":"Custom",
   "license_file":"LICENSE",
   "summary":"A Portable Foreign Function Interface Library."
  },
  "build":{
   "number":"1007",
   "run_exports":[
    "libffi",
    "libffi",
    "libffi"
   ]
  },
  "extra":{
   "recipe-maintainers":[
    "stefan-balke",
    "scopatz",
    "stefan-balke",
    "scopatz",
    "stefan-balke",
    "scopatz"
   ]
  },
  "package":{
   "name":"libffi",
   "version":"3.2.1"
  },
  "requirements":{
   "build":[
    "posix",
    "autoconf",
    "automake1.15",
    "libtool",
    "patch",
    "texinfo",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "autoconf",
    "automake",
    "libtool",
    "patch",
    "texinfo",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "autoconf",
    "automake",
    "libtool",
    "patch",
    "texinfo",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host":null,
   "run":null
  },
  "source":{
   "patches":[
    "configure_includedir_option.patch",
    "0001-x86-MSVC-does-not-support-Complex-type.patch",
    "0002-Don-t-define-FFI_COMPLEX_TYPEDEF-ifndef-FFI_TARGET_H.patch",
    "0003-Win64-Remove-two-SHORT-annotations.patch",
    "0004-Remove-C99-constructs.patch",
    "windows-static.patch",
    "fix_win_libffi_pc.patch",
    "configure_includedir_option.patch",
    "configure_includedir_option.patch"
   ],
   "sha256":"96d08dee6f262beea1a18ac9a3801f64018dc4521895e9198d029d6850febe23",
   "url":"https://github.com/libffi/libffi/archive/v3.2.1.tar.gz"
  },
  "test":{
   "commands":[
    "if not exist %LIBRARY_PREFIX%/lib/libffi.lib exit /b 1",
    "if not exist %LIBRARY_PREFIX%/include/ffi.h exit /b 1",
    "if not exist %LIBRARY_PREFIX%/include/ffitarget.h exit /b 1",
    "test -e $PREFIX/lib/libffi${SHLIB_EXT}",
    "test -e $PREFIX/lib/libffi.a",
    "test -e $PREFIX/include/ffi.h",
    "test -e $PREFIX/include/ffitarget.h",
    "test -e $PREFIX/lib/libffi${SHLIB_EXT}",
    "test -e $PREFIX/lib/libffi.a",
    "test -e $PREFIX/include/ffi.h",
    "test -e $PREFIX/include/ffitarget.h"
   ]
  }
 },
 "name":"libffi",
 "new_version":"3.3",
 "pinning_version":"2019.11.20",
 "raw_meta_yaml":"{% set version = \"3.2.1\" %}\n{% set am_version = \"1.15\" %} # keep synchronized with build.sh\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: libffi\n  version: {{ version }}\n\nsource:\n  url: https://github.com/libffi/libffi/archive/v{{ version }}.tar.gz\n  sha256: 96d08dee6f262beea1a18ac9a3801f64018dc4521895e9198d029d6850febe23\n  patches:\n    - configure_includedir_option.patch\n    # Windows-specific:\n    - 0001-x86-MSVC-does-not-support-Complex-type.patch                # [win]\n    - 0002-Don-t-define-FFI_COMPLEX_TYPEDEF-ifndef-FFI_TARGET_H.patch  # [win]\n    - 0003-Win64-Remove-two-SHORT-annotations.patch                    # [win]\n    - 0004-Remove-C99-constructs.patch                                 # [win]\n    - windows-static.patch                                             # [win]\n    - fix_win_libffi_pc.patch                                          # [win]\n\nbuild:\n  number: 1007\n  run_exports:\n    # good history: https://abi-laboratory.pro/tracker/timeline/libffi/\n    - {{ pin_subpackage('libffi') }}\n\nrequirements:\n  build:\n    - posix                              # [win]\n    - make                               # [unix] \n    - {{posix}}autoconf\n    - {{posix}}automake{{ am_version }}  # [win]\n    - {{posix}}automake                  # [not win]\n    - {{posix}}libtool\n    - {{posix}}patch\n    - {{posix}}texinfo\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n  run:\n    - {{native}}gcc-libs  # [win]\n\ntest:\n  commands:\n    - test -e $PREFIX/lib/libffi${SHLIB_EXT}                       # [not win]\n    - test -e $PREFIX/lib/libffi.a                                 # [not win]\n    - test -e $PREFIX/include/ffi.h                                # [not win]\n    - test -e $PREFIX/include/ffitarget.h                          # [not win]\n    - if not exist %LIBRARY_PREFIX%/lib/libffi.lib exit /b 1       # [win]\n    - if not exist %LIBRARY_PREFIX%/include/ffi.h exit /b 1        # [win]\n    - if not exist %LIBRARY_PREFIX%/include/ffitarget.h exit /b 1  # [win]\n\nabout:\n  home: https://sourceware.org/libffi/\n  license: Custom\n  license_file: LICENSE\n  summary: A Portable Foreign Function Interface Library.\n\n  description: |\n    The libffi library provides a portable, high level programming interface\n    to various calling conventions. This allows a programmer to call any\n    function specified by a call interface description at run-time.\n  doc_url: https://sourceware.org/libffi/\n  dev_url: https://github.com/libffi/libffi\n\nextra:\n  recipe-maintainers:\n    - stefan-balke\n    - scopatz\n",
 "req":{
  "__set__":true,
  "elements":[
   "autoconf",
   "automake",
   "automake1.15",
   "c_compiler_stub",
   "cxx_compiler_stub",
   "libtool",
   "make",
   "patch",
   "posix",
   "texinfo"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "autoconf",
    "automake",
    "automake1.15",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "libtool",
    "make",
    "patch",
    "posix",
    "texinfo"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"3.6.2",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "autoconf",
    "automake",
    "automake1.15",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "libtool",
    "make",
    "patch",
    "posix",
    "texinfo"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://github.com/libffi/libffi/archive/v3.2.1.tar.gz",
 "version":"3.2.1"
}