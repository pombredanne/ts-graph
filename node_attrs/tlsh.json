{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/283914103.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"3.13.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/299201500.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"3.17.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/335809217.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/393699299.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"pypy"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/394032287.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"4.2.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/395083210.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"4.2.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{},
 "feedstock_name":"tlsh",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"Given a byte stream with a minimum length of 50 bytes TLSH generates a\nhash value which can be used for similarity comparisons. Similar objects\nwill have similar hash values which allows for the detection of similar\nobjects by comparing their hash values. Note that the byte stream should\nhave a sufficient amount of complexity. For example, a byte stream of\nidentical bytes will not generate a hash value.\n",
   "home":"https://github.com/trendmicro/tlsh",
   "license":"Apache-2.0",
   "license_family":"Apache",
   "license_file":"LICENSE",
   "summary":"TLSH is a fuzzy matching library."
  },
  "build":{
   "number":"0",
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "bollwyvl",
    "bollwyvl",
    "bollwyvl"
   ]
  },
  "outputs":[
   {
    "build":{
     "run_exports":[
      "libtlsh"
     ]
    },
    "name":"libtlsh",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ]
    },
    "script":"install-libtlsh.sh",
    "test":{
     "commands":[
      "echo libtlsh tested are during build"
     ]
    }
   },
   {
    "build":{
     "run_exports":[
      "python-tlsh"
     ]
    },
    "name":"python-tlsh",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host":[
      "libtlsh",
      "python",
      "pip"
     ],
     "run":[
      "libtlsh",
      "python"
     ]
    },
    "script":"install-python-tlsh.sh",
    "test":{
     "imports":[
      "tlsh"
     ]
    }
   },
   {
    "build":{
     "run_exports":[
      "libtlsh"
     ]
    },
    "name":"tlsh-tools",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host":[
      "libtlsh"
     ],
     "run":[
      "libtlsh"
     ]
    },
    "script":"install-tlsh-tools.sh",
    "test":{
     "commands":[
      "tlsh --help",
      "tlsh_unittest --help"
     ]
    }
   },
   {
    "build":{
     "run_exports":[
      "libtlsh"
     ]
    },
    "name":"libtlsh",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ]
    },
    "script":"install-libtlsh.sh",
    "test":{
     "commands":[
      "echo libtlsh tested are during build"
     ]
    }
   },
   {
    "build":{
     "run_exports":[
      "python-tlsh"
     ]
    },
    "name":"python-tlsh",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host":[
      "libtlsh",
      "python",
      "pip"
     ],
     "run":[
      "libtlsh",
      "python"
     ]
    },
    "script":"install-python-tlsh.sh",
    "test":{
     "imports":[
      "tlsh"
     ]
    }
   },
   {
    "build":{
     "run_exports":[
      "libtlsh"
     ]
    },
    "name":"tlsh-tools",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host":[
      "libtlsh"
     ],
     "run":[
      "libtlsh"
     ]
    },
    "script":"install-tlsh-tools.sh",
    "test":{
     "commands":[
      "tlsh --help",
      "tlsh_unittest --help"
     ]
    }
   },
   {
    "build":{
     "run_exports":[
      "libtlsh"
     ]
    },
    "name":"libtlsh",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ]
    },
    "script":"install-libtlsh.sh",
    "test":{
     "commands":[
      "echo libtlsh tested are during build"
     ]
    }
   },
   {
    "build":{
     "run_exports":[
      "python-tlsh"
     ]
    },
    "name":"python-tlsh",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host":[
      "libtlsh",
      "python",
      "pip"
     ],
     "run":[
      "libtlsh",
      "python"
     ]
    },
    "script":"install-python-tlsh.sh",
    "test":{
     "imports":[
      "tlsh"
     ]
    }
   },
   {
    "build":{
     "run_exports":[
      "libtlsh"
     ]
    },
    "name":"tlsh-tools",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host":[
      "libtlsh"
     ],
     "run":[
      "libtlsh"
     ]
    },
    "script":"install-tlsh-tools.sh",
    "test":{
     "commands":[
      "tlsh --help",
      "tlsh_unittest --help"
     ]
    }
   }
  ],
  "package":{
   "name":"tlsh",
   "version":"3.19.1"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host":[
    "python",
    "pip",
    "python",
    "pip",
    "python",
    "pip"
   ],
   "run":[
    "python",
    "python",
    "python"
   ]
  },
  "source":{
   "patches":[
    "make.patch",
    "make.patch",
    "make.patch"
   ],
   "sha256":"a8a7972d8bafb5fd66bd597b72037356dd9882e71a7e9b5f37281751a99ce686",
   "url":"https://github.com/trendmicro/tlsh/archive/3.19.1.tar.gz"
  },
  "test":{
   "commands":[
    "test -f ${CONDA_PREFIX}/lib/libtlsh.${SHLIB_EXT}",
    "test -f ${CONDA_PREFIX}/lib/libtlsh.${SHLIB_EXT}",
    "test -f ${CONDA_PREFIX}/lib/libtlsh.${SHLIB_EXT}"
   ]
  }
 },
 "name":"tlsh",
 "new_version":"4.2.1",
 "outputs_names":[
  "libtlsh",
  "python-tlsh",
  "tlsh-tools"
 ],
 "pinning_version":"2020.03.24",
 "raw_meta_yaml":"{% set name = \"tlsh\" %}\n{% set version = \"3.19.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/trendmicro/{{ name }}/archive/{{ version }}.tar.gz\n  sha256: a8a7972d8bafb5fd66bd597b72037356dd9882e71a7e9b5f37281751a99ce686\n  patches:\n    - make.patch\n\nbuild:\n  number: 0\n  skip: true  # [win]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make\n  host:\n    - python\n    - pip\n  run:\n    - python\n\ntest:\n  commands:\n    - test -f ${CONDA_PREFIX}/lib/libtlsh.${SHLIB_EXT}\n\noutputs:\n  - name: libtlsh\n    script: install-libtlsh.sh\n    build:\n      run_exports:\n        - {{ pin_subpackage('libtlsh', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - make\n    test:\n      commands:\n        - echo libtlsh tested are during build\n  - name: python-tlsh\n    script: install-python-tlsh.sh\n    build:\n      run_exports:\n        - {{ pin_subpackage('python-tlsh', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - make\n      host:\n        - {{ pin_subpackage('libtlsh', exact=True) }}\n        - python\n        - pip\n      run:\n        - {{ pin_subpackage('libtlsh', exact=True) }}\n        - python\n    test:\n      imports:\n        - tlsh\n        # commands:\n        # - echo \"TODO: restore the tests when python_test.sh works\"\n        # cd Testing && sh python_test.sh\n  - name: tlsh-tools\n    script: install-tlsh-tools.sh\n    build:\n      run_exports:\n        - {{ pin_subpackage('libtlsh', max_pin='x.x') }}\n    test:\n      commands:\n        - tlsh --help\n        - tlsh_unittest --help\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - make\n      host:\n        - {{ pin_subpackage('libtlsh', exact=True) }}\n      run:\n        - {{ pin_subpackage('libtlsh', exact=True) }}\n\nabout:\n  home: https://github.com/trendmicro/tlsh\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: 'TLSH is a fuzzy matching library.'\n  description: |\n     Given a byte stream with a minimum length of 50 bytes TLSH generates a\n     hash value which can be used for similarity comparisons. Similar objects\n     will have similar hash values which allows for the detection of similar\n     objects by comparing their hash values. Note that the byte stream should\n     have a sufficient amount of complexity. For example, a byte stream of\n     identical bytes will not generate a hash value.\n\nextra:\n  recipe-maintainers:\n    - bollwyvl\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "cmake",
   "cxx_compiler_stub",
   "libtlsh",
   "make",
   "pip",
   "python"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "libtlsh",
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "libtlsh",
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.6.15",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "libtlsh",
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "libtlsh",
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://github.com/trendmicro/tlsh/archive/3.17.0.tar.gz",
 "version":"3.19.1"
}