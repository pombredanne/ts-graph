{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/353204155.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"5.65.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/361720924.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"5.66.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/372813067.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"5.67.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/399915021.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"5.68.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/402183625.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"5.69.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/415562664.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"5.70.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{},
 "feedstock_name":"kcompletion",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"When typing filenames, email addresses and other text where the user often wants to\nselect from existing data (including what they previously typed) rather than enter\nanything wholly original, users often find it helpful if they only need to type the\nfirst few characters, and then have the application offer them a set of choices or\nattempt to finish off what they were typing. Email clients, shells and \"open file\"\ndialogs often provide this functionality.\n\nThis framework helps implement this in Qt-based applications. You can use one of\nthe completion-ready widgets provided by this framework, or integrate it into your\napplication's other widgets directly.\n",
   "dev_url":"https://cgit.kde.org/kcompletion.git/tree",
   "home":"https://api.kde.org/frameworks/kcompletion/html/index.html",
   "license":"LGPL-v2.1-or-later",
   "license_family":"GPL",
   "license_file":"COPYING.LIB",
   "summary":"Powerful completion framework, including completion-enabled lineedit and combobox."
  },
  "build":{
   "number":"0",
   "run_exports":[
    "kcompletion",
    "kcompletion",
    "kcompletion"
   ],
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "scopatz",
    "scopatz",
    "scopatz"
   ]
  },
  "package":{
   "name":"kcompletion",
   "version":"5.69.0"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "extra-cmake-modules",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "extra-cmake-modules",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "extra-cmake-modules",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub"
   ],
   "host":[
    "xorg-libxext",
    "qt",
    "kconfig",
    "kwidgetsaddons",
    "xorg-libxext",
    "qt",
    "kconfig",
    "kwidgetsaddons",
    "xorg-libxfixes",
    "xorg-libxext",
    "qt",
    "kconfig",
    "kwidgetsaddons"
   ]
  },
  "source":{
   "sha256":"02070a926d252ca8a29970764a39cf984e80e72a4260fe8086718e96c43c0e14",
   "url":"https://download.kde.org/stable/frameworks/5.69/kcompletion-5.69.0.tar.xz"
  },
  "test":{
   "commands":[
    "test -f ${PREFIX}/lib/libKF5Completion.so",
    "test -f ${PREFIX}/lib/libKF5Completion.so",
    "test -f ${PREFIX}/lib/libKF5Completion.so"
   ]
  }
 },
 "name":"kcompletion",
 "new_version":"5.70.0",
 "new_version_attempts":{
  "5.68.0":1,
  "5.69.0":1,
  "5.70.0":1
 },
 "new_version_errors":{},
 "pinning_version":"2020.05.09.00.08.03",
 "raw_meta_yaml":"{% set name = \"kcompletion\" %}\n{% set version = \"5.69.0\" %}\n{% set major_minor = \".\".join(version.split(\".\")[:2]) %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://download.kde.org/stable/frameworks/{{ major_minor }}/kcompletion-{{ version }}.tar.xz\n  sha256: 02070a926d252ca8a29970764a39cf984e80e72a4260fe8086718e96c43c0e14\n\nbuild:\n  number: 0\n  skip: true  # [not linux]\n  run_exports:\n    - {{ pin_subpackage('kcompletion', max_pin='x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make\n    - extra-cmake-modules\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - {{ cdt('mesa-dri-drivers') }}  # [linux]\n    - {{ cdt('libselinux') }}  # [linux]\n    - {{ cdt('libxdamage') }}  # [linux]\n    - {{ cdt('libxxf86vm') }}  # [linux]\n  host:\n    - xorg-libxfixes  # [linux]\n    - xorg-libxext\n    - qt\n    - kconfig\n    - kwidgetsaddons\n\ntest:\n  commands:\n    - test -f ${PREFIX}/lib/libKF5Completion.so\n\nabout:\n  home: https://api.kde.org/frameworks/kcompletion/html/index.html\n  license: LGPL-v2.1-or-later\n  license_family: GPL\n  license_file: COPYING.LIB\n  summary: Powerful completion framework, including completion-enabled lineedit and combobox.\n  description: |\n    When typing filenames, email addresses and other text where the user often wants to\n    select from existing data (including what they previously typed) rather than enter\n    anything wholly original, users often find it helpful if they only need to type the\n    first few characters, and then have the application offer them a set of choices or\n    attempt to finish off what they were typing. Email clients, shells and \"open file\"\n    dialogs often provide this functionality.\n\n    This framework helps implement this in Qt-based applications. You can use one of\n    the completion-ready widgets provided by this framework, or integrate it into your\n    application's other widgets directly.\n  dev_url: https://cgit.kde.org/kcompletion.git/tree\n\nextra:\n  recipe-maintainers:\n    - scopatz\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "cdt_stub",
   "cmake",
   "cxx_compiler_stub",
   "extra-cmake-modules",
   "kconfig",
   "kwidgetsaddons",
   "make",
   "qt",
   "xorg-libxext",
   "xorg-libxfixes"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "extra-cmake-modules",
    "make"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "kconfig",
    "kwidgetsaddons",
    "qt",
    "xorg-libxext",
    "xorg-libxfixes"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.0\n",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "extra-cmake-modules",
    "make"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "kconfig",
    "kwidgetsaddons",
    "qt",
    "xorg-libxext",
    "xorg-libxfixes"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://download.kde.org/stable/frameworks/5.64/kcompletion-5.64.0.tar.xz",
 "version":"5.69.0"
}