{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/347679087.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"6.1.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/349552360.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"6.1.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/353199490.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"6.1.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/364117055.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"ArchRebuild",
    "migrator_version":1,
    "name":"aarch64 and ppc64le addition"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/399724139.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"6.2.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/415605678.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"6.2.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "provider":{
   "linux_aarch64":"default",
   "linux_ppc64le":"default"
  }
 },
 "feedstock_name":"fmt",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"{fmt} is an open-source formatting library for C++.\nIt can be used as a safe and fast alternative to (s)printf and iostreams.\n",
   "dev_url":"https://github.com/fmtlib/fmt",
   "doc_url":"https://fmt.dev/latest/",
   "home":"https://fmt.dev/latest/",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE.rst",
   "summary":"{fmt} is an open-source formatting library for C++"
  },
  "build":{
   "number":"0",
   "run_exports":[
    "fmt",
    "fmt",
    "fmt"
   ],
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "tdegeus",
    "vitaut",
    "saraedum",
    "tdegeus",
    "vitaut",
    "saraedum",
    "tdegeus",
    "vitaut",
    "saraedum"
   ]
  },
  "package":{
   "name":"fmt",
   "version":"6.2.1"
  },
  "requirements":{
   "build":[
    "cxx_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "source":{
   "sha256":"5edf8b0f32135ad5fafb3064de26d063571e95e8ae46829c2f4f4b52696bbff0",
   "url":"https://github.com/fmtlib/fmt/archive/6.2.1.tar.gz"
  },
  "test":{
   "commands":[
    "if exist %LIBRARY_PREFIX%\\include\\fmt\\core.h (exit 0) else (exit 1)",
    "if exist %LIBRARY_PREFIX%\\include\\fmt\\format.h (exit 0) else (exit 1)",
    "if exist %LIBRARY_PREFIX%\\lib\\cmake\\fmt-config.cmake (exit 0) else (exit 1)",
    "if exist %LIBRARY_PREFIX%\\bin\\fmt.dll (exit 0) else (exit 1)",
    "test -d ${PREFIX}/include/fmt",
    "test -f ${PREFIX}/include/fmt/core.h",
    "test -f ${PREFIX}/include/fmt/format.h",
    "test -f ${PREFIX}/lib/cmake/fmt/fmt-config.cmake",
    "test -f ${PREFIX}/lib/libfmt.dylib",
    "test -d ${PREFIX}/include/fmt",
    "test -f ${PREFIX}/include/fmt/core.h",
    "test -f ${PREFIX}/include/fmt/format.h",
    "test -f ${PREFIX}/lib/cmake/fmt/fmt-config.cmake",
    "test -f ${PREFIX}/lib/libfmt.so"
   ]
  }
 },
 "name":"fmt",
 "new_version":"6.2.1",
 "new_version_attempts":{
  "6.2.0":1,
  "6.2.1":1
 },
 "new_version_errors":{},
 "pinning_version":"2020.05.09.00.08.03",
 "raw_meta_yaml":"{% set name = \"fmt\" %}\n{% set version = \"6.2.1\" %}\n{% set sha256 = \"5edf8b0f32135ad5fafb3064de26d063571e95e8ae46829c2f4f4b52696bbff0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/fmtlib/fmt/archive/{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  skip: true  # [win and vc<14]\n  run_exports:\n    - {{ pin_subpackage('fmt', max_pin='x') }}\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - make  # [unix]\n\ntest:\n  commands:\n    - test -d ${PREFIX}/include/fmt  # [unix]\n    - test -f ${PREFIX}/include/fmt/core.h  # [unix]\n    - test -f ${PREFIX}/include/fmt/format.h  # [unix]\n    - test -f ${PREFIX}/lib/cmake/fmt/fmt-config.cmake  # [unix]\n    - test -f ${PREFIX}/lib/libfmt.so  # [linux]\n    - test -f ${PREFIX}/lib/libfmt.dylib  # [osx]\n    - if exist %LIBRARY_PREFIX%\\include\\fmt\\core.h (exit 0) else (exit 1)  # [win]\n    - if exist %LIBRARY_PREFIX%\\include\\fmt\\format.h (exit 0) else (exit 1)  # [win]\n    - if exist %LIBRARY_PREFIX%\\lib\\cmake\\fmt-config.cmake (exit 0) else (exit 1)  # [win]\n    - if exist %LIBRARY_PREFIX%\\bin\\fmt.dll (exit 0) else (exit 1)  # [win]\n\nabout:\n  home: https://fmt.dev/latest/\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.rst\n  summary: '{fmt} is an open-source formatting library for C++'\n  description: |\n    {fmt} is an open-source formatting library for C++.\n    It can be used as a safe and fast alternative to (s)printf and iostreams.\n  doc_url: https://fmt.dev/latest/\n  dev_url: https://github.com/fmtlib/fmt\n\nextra:\n  recipe-maintainers:\n    - tdegeus\n    - vitaut\n    - saraedum\n",
 "req":{
  "__set__":true,
  "elements":[
   "cmake",
   "cxx_compiler_stub",
   "make"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.0\n",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://github.com/fmtlib/fmt/archive/6.0.0.tar.gz",
 "version":"6.2.1"
}