{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/297178527.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.2.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/320922239.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.3.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/348691742.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/375678017.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MatplotlibBase",
    "migrator_version":0,
    "name":"matplotlib-to-matplotlib-base"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/394492852.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.5.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/397283020.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.5.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/402266202.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.6.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/413204691.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.6.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/419192202.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.7.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"deepxde",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"DeepXDE is a deep learning library for solving differential equations on top of TensorFlow.\nUse DeepXDE if you need a deep learning library that\nsolves partial differential equations (PDEs),\nsolves integro-differential equations (IDEs),\nsolves fractional partial differential equations (fPDEs),\nsolves inverse problems for differential equations,\napproximates functions from a dataset with/without constraints,\napproximates functions from multi-fidelity data,\nand approximates operators.\n",
   "dev_url":"https://github.com/lululxvi/deepxde",
   "doc_url":"https://deepxde.readthedocs.io",
   "home":"https://github.com/lululxvi/deepxde",
   "license":"Apache-2.0",
   "license_family":"Apache",
   "license_file":"LICENSE",
   "summary":"Deep learning library for solving differential equations"
  },
  "build":{
   "number":"0",
   "script":"-m pip install . -vv"
  },
  "extra":{
   "recipe-maintainers":[
    "lululxvi",
    "lululxvi",
    "lululxvi"
   ]
  },
  "package":{
   "name":"deepxde",
   "version":"0.7.0"
  },
  "requirements":{
   "host":[
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy",
    "python",
    "pip",
    "numpy"
   ],
   "run":[
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow",
    "python",
    "numpy",
    "matplotlib-base",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "source":{
   "sha256":"f74d742055f79c88b1ba5d844c43815044ac0f2ed44e91d7cb1a7667eb93152d",
   "url":"https://pypi.io/packages/source/D/DeepXDE/DeepXDE-0.7.0.tar.gz"
  },
  "test":{
   "imports":null
  }
 },
 "name":"deepxde",
 "new_version":"0.7.0",
 "new_version_attempts":{
  "0.6.0":1,
  "0.6.1":1,
  "0.7.0":1
 },
 "new_version_errors":{},
 "pinning_version":"2020.05.14.17.14.20",
 "raw_meta_yaml":"{% set name = \"DeepXDE\" %}\n{% set version = \"0.7.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: f74d742055f79c88b1ba5d844c43815044ac0f2ed44e91d7cb1a7667eb93152d\n\nbuild:\n  number: 0\n  # Skip windows with Python 2.7 as TensorFlow does not support it well.\n  skip: true  # [win and py27]\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python\n    - pip\n    - numpy\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - matplotlib-base\n    - salib\n    - scikit-learn\n    - scipy\n    - tensorflow\n\ntest:\n  imports:\n    # Skip the import test on Linux as TensorFlow require a more recent\n    # version of GLIBC++ than the VM used to build and test package.\n    - deepxde  # [not linux]\n\nabout:\n  home: https://github.com/lululxvi/deepxde\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: Deep learning library for solving differential equations\n\n  description: |\n    DeepXDE is a deep learning library for solving differential equations on top of TensorFlow.\n    Use DeepXDE if you need a deep learning library that\n    solves partial differential equations (PDEs),\n    solves integro-differential equations (IDEs),\n    solves fractional partial differential equations (fPDEs),\n    solves inverse problems for differential equations,\n    approximates functions from a dataset with/without constraints,\n    approximates functions from multi-fidelity data,\n    and approximates operators.\n  doc_url: https://deepxde.readthedocs.io\n  dev_url: https://github.com/lululxvi/deepxde\n\nextra:\n  recipe-maintainers:\n    - lululxvi\n",
 "req":{
  "__set__":true,
  "elements":[
   "matplotlib-base",
   "numpy",
   "pip",
   "python",
   "salib",
   "scikit-learn",
   "scipy",
   "tensorflow"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "numpy",
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "matplotlib-base",
    "numpy",
    "python",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.2\n",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[]
  },
  "host":{
   "__set__":true,
   "elements":[
    "numpy",
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "matplotlib-base",
    "numpy",
    "python",
    "salib",
    "scikit-learn",
    "scipy",
    "tensorflow"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://pypi.io/packages/source/D/DeepXDE/DeepXDE-0.2.0.tar.gz",
 "version":"0.7.0"
}