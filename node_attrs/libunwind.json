{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/196933219.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Compiler",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/242991215.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.3.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/243500329.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.3.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/371062804.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"ArchRebuild",
    "migrator_version":1,
    "name":"aarch64 and ppc64le addition"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/400236669.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.4.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/407308632.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":"Upstream: Error getting upstream version",
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35"
 },
 "feedstock_name":"libunwind",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "home":"http://www.nongnu.org/libunwind",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"COPYING",
   "summary":"Defines a portable and efficient C programming interface (API) to determine the call-chain of a program"
  },
  "build":{
   "number":"1000",
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "synapticarbors",
    "synapticarbors",
    "synapticarbors"
   ]
  },
  "package":{
   "name":"libunwind",
   "version":"1.3.1"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host":null
  },
  "source":{
   "patches":[
    "run-coredump-unwind.patch",
    "run-coredump-unwind.patch",
    "run-coredump-unwind.patch"
   ],
   "sha256":"43997a3939b6ccdf2f669b50fdb8a4d3205374728c2923ddc2354c65260214f8",
   "url":"http://download.savannah.nongnu.org/releases/libunwind/libunwind-1.3.1.tar.gz"
  },
  "test":{
   "commands":[
    "test -f \"${PREFIX}/lib/libunwind.so\"",
    "test -f \"${PREFIX}/include/libunwind.h\"",
    "test -f \"${PREFIX}/include/unwind.h\"",
    "conda inspect linkages -p \"${PREFIX}\" \"libunwind\"",
    "test -f \"${PREFIX}/lib/libunwind.so\"",
    "test -f \"${PREFIX}/include/libunwind.h\"",
    "test -f \"${PREFIX}/include/unwind.h\"",
    "conda inspect linkages -p \"${PREFIX}\" \"libunwind\"",
    "test -f \"${PREFIX}/lib/libunwind.so\"",
    "test -f \"${PREFIX}/include/libunwind.h\"",
    "test -f \"${PREFIX}/include/unwind.h\"",
    "conda inspect linkages -p \"${PREFIX}\" \"libunwind\""
   ]
  }
 },
 "name":"libunwind",
 "new_version":"1.4.0",
 "new_version_attempts":{
  "1.3.2":1,
  "1.4.0":2
 },
 "new_version_errors":{},
 "pinning_version":"2020.04.22.03.51.02",
 "raw_meta_yaml":"{% set name = \"libunwind\" %}\n{% set version = \"1.3.1\" %}\n{% set sha256 = \"43997a3939b6ccdf2f669b50fdb8a4d3205374728c2923ddc2354c65260214f8\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: http://download.savannah.nongnu.org/releases/libunwind/libunwind-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n  patches:\n    # no-op failing test. No clear explanation for failure. Only discussion went unresolved on upstream mailing\n    # list: https://lists.nongnu.org/archive/html/libunwind-devel/2015-01/msg00010.html\n    - run-coredump-unwind.patch\n\nbuild:\n  number: 1000\n  skip: True  # [win or osx]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n\ntest:\n  commands:\n    - test -f \"${PREFIX}/lib/libunwind.so\"\n    - test -f \"${PREFIX}/include/libunwind.h\"\n    - test -f \"${PREFIX}/include/unwind.h\"\n    - conda inspect linkages -p \"${PREFIX}\" \"{{ name }}\"\n\nabout:\n  home: http://www.nongnu.org/libunwind\n  license: MIT\n  license_family: MIT\n  license_file: COPYING\n  summary: 'Defines a portable and efficient C programming interface (API) to determine the call-chain of a program'\n\nextra:\n  recipe-maintainers:\n    - synapticarbors\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "cxx_compiler_stub"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.6.17",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"http://download.savannah.nongnu.org/releases/libunwind/libunwind-1.3.1.tar.gz",
 "version":"1.3.1"
}