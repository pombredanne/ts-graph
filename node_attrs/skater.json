{
 "PRed":[
  {
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.1.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/200005715.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Noarch",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/217205879.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.1.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/226716701.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/348689045.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/375733229.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MatplotlibBase",
    "migrator_version":0,
    "name":"matplotlib-to-matplotlib-base"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35"
 },
 "feedstock_name":"skater",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"Skater is a python package for model agnostic interpretation of predictive\nmodels. With Skater, you can unpack the internal mechanics of arbitrary\nmodels; as long as you can obtain inputs, and use a function to obtain\noutputs, you can use Skater to learn about the models internal\ndecision policies.\n",
   "dev_url":"https://github.com/datascienceinc/Skater",
   "doc_url":"https://datascienceinc.github.io/Skater/index.html",
   "home":"https://github.com/datascienceinc/Skater",
   "license":"MIT",
   "license_family":"MIT",
   "license_file":"LICENSE",
   "summary":"Python Library for Model Agnostic Interpretation"
  },
  "build":{
   "number":"1001",
   "script":"python setup.py install --single-version-externally-managed --record record.txt"
  },
  "extra":{
   "recipe-maintainers":[
    "benvandyke",
    "aikramer2",
    "benvandyke",
    "aikramer2",
    "benvandyke",
    "aikramer2"
   ]
  },
  "package":{
   "name":"skater",
   "version":"1.0.2"
  },
  "requirements":{
   "build":[
    "python",
    "setuptools",
    "python",
    "setuptools",
    "python",
    "setuptools"
   ],
   "run":[
    "python",
    "scipy >=0.15",
    "numpy >=1.10",
    "scikit-learn >=0.18",
    "pandas >=0.19",
    "matplotlib-base",
    "pathos",
    "dill",
    "requests",
    "ds-lime >=0.1.1.27",
    "python",
    "scipy >=0.15",
    "numpy >=1.10",
    "scikit-learn >=0.18",
    "pandas >=0.19",
    "matplotlib-base",
    "pathos",
    "dill",
    "requests",
    "ds-lime >=0.1.1.27",
    "python",
    "scipy >=0.15",
    "numpy >=1.10",
    "scikit-learn >=0.18",
    "pandas >=0.19",
    "matplotlib-base",
    "pathos",
    "dill",
    "requests",
    "ds-lime >=0.1.1.27"
   ]
  },
  "source":{
   "fn":"skater-1.0.2.tar.gz",
   "sha256":"736ec805ebd0aabe635fe7f6c1b87e3ec4f30006fecba742aede651cb4a76e6f",
   "url":"https://pypi.io/packages/source/s/skater/skater-1.0.2.tar.gz"
  },
  "test":{
   "imports":[
    "skater",
    "skater.model",
    "skater.data",
    "skater.core.explanations",
    "skater.util",
    "skater.core.local_interpretation.lime.lime_tabular",
    "skater.util.dataops",
    "skater.core.global_interpretation.partial_dependence",
    "skater",
    "skater.model",
    "skater.data",
    "skater.core.explanations",
    "skater.util",
    "skater.core.local_interpretation.lime.lime_tabular",
    "skater.util.dataops",
    "skater.core.global_interpretation.partial_dependence",
    "skater",
    "skater.model",
    "skater.data",
    "skater.core.explanations",
    "skater.util",
    "skater.core.local_interpretation.lime.lime_tabular",
    "skater.util.dataops",
    "skater.core.global_interpretation.partial_dependence"
   ]
  }
 },
 "name":"skater",
 "new_version":"1.1.2",
 "pinning_version":"2020.02.12",
 "raw_meta_yaml":"{% set name = \"skater\" %}\n{% set version = \"1.0.2\" %}\n{% set sha256 = \"736ec805ebd0aabe635fe7f6c1b87e3ec4f30006fecba742aede651cb4a76e6f\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 1001\n  script: python setup.py install --single-version-externally-managed --record record.txt\n\nrequirements:\n  build:\n    - python\n    - setuptools\n  run:\n    - python\n    - scipy >=0.15\n    - numpy >=1.10\n    - scikit-learn >=0.18\n    - pandas >=0.19\n    - matplotlib-base\n    - pathos\n    - dill\n    - requests\n    - ds-lime >=0.1.1.27\n\ntest:\n  imports:\n    - skater\n    - skater.model\n    - skater.data\n    - skater.core.explanations\n    - skater.util\n    - skater.core.local_interpretation.lime.lime_tabular\n    - skater.util.dataops\n    - skater.core.global_interpretation.partial_dependence\n\nabout:\n  home: https://github.com/datascienceinc/Skater\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'Python Library for Model Agnostic Interpretation'\n  description: |\n    Skater is a python package for model agnostic interpretation of predictive\n    models. With Skater, you can unpack the internal mechanics of arbitrary\n    models; as long as you can obtain inputs, and use a function to obtain\n    outputs, you can use Skater to learn about the models internal\n    decision policies.\n  doc_url: https://datascienceinc.github.io/Skater/index.html\n  dev_url: https://github.com/datascienceinc/Skater\n\nextra:\n  recipe-maintainers:\n    - benvandyke\n    - aikramer2\n",
 "req":{
  "__set__":true,
  "elements":[
   "dill",
   "ds-lime",
   "matplotlib-base",
   "numpy",
   "pandas",
   "pathos",
   "python",
   "requests",
   "scikit-learn",
   "scipy",
   "setuptools"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "python",
    "setuptools"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "dill",
    "ds-lime",
    "matplotlib-base",
    "numpy",
    "pandas",
    "pathos",
    "python",
    "requests",
    "scikit-learn",
    "scipy"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"3.6.8",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "python",
    "setuptools"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "dill",
    "ds-lime >=0.1.1.27",
    "matplotlib-base",
    "numpy >=1.10",
    "pandas >=0.19",
    "pathos",
    "python",
    "requests",
    "scikit-learn >=0.18",
    "scipy >=0.15"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://pypi.io/packages/source/s/skater/skater-1.0.2.tar.gz",
 "version":"1.0.2"
}