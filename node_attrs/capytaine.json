{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/265312053.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.0.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/308292362.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"GFortranOSXRebuild",
    "migrator_version":0,
    "name":"fortran_compiler_stub-7"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/320795697.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/339461903.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/374842843.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MatplotlibBase",
    "migrator_version":0,
    "name":"matplotlib-to-matplotlib-base"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/408547419.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"1.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/408622070.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"pypy"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"capytaine",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "home":"https://github.com/mancellin/capytaine",
   "license":"GPL-3.0-or-later",
   "license_family":"GPL",
   "license_file":"LICENSE",
   "summary":"A Python-based linear potential flow solver based on Nemoh"
  },
  "build":{
   "entry_points":[
    "capytaine = capytaine.ui.cli:main",
    "capytaine = capytaine.ui.cli:main",
    "capytaine = capytaine.ui.cli:main"
   ],
   "number":"1",
   "script":" -m pip install . --no-deps -vv"
  },
  "extra":{
   "recipe-maintainers":[
    "mancellin",
    "mancellin",
    "mancellin"
   ]
  },
  "package":{
   "name":"capytaine",
   "version":"1.2"
  },
  "requirements":{
   "build":[
    "fortran_compiler_stub",
    "c_compiler_stub",
    "m2w64_c_compiler_stub",
    "m2w64_fortran_compiler_stub",
    "fortran_compiler_stub",
    "c_compiler_stub",
    "llvm-openmp",
    "fortran_compiler_stub",
    "c_compiler_stub"
   ],
   "host":[
    "python",
    "pip",
    "setuptools",
    "numpy",
    "m2w64-toolchain",
    "libpython",
    "python",
    "pip",
    "setuptools",
    "numpy",
    "llvm-openmp",
    "python",
    "pip",
    "setuptools",
    "numpy"
   ],
   "run":[
    "python",
    "numpy",
    "scipy",
    "pandas",
    "xarray",
    "python",
    "numpy",
    "scipy",
    "pandas",
    "xarray",
    "llvm-openmp",
    "python",
    "numpy",
    "scipy",
    "pandas",
    "xarray"
   ]
  },
  "source":{
   "sha256":"b3dc967ffde8a0b9d815ab955b92a768711666236474776771b48f22e9e80f89",
   "url":"https://github.com/mancellin/capytaine/archive/v1.2.tar.gz"
  },
  "test":{
   "commands":[
    "pip install quadpy",
    "pytest",
    "capytaine --help",
    "pip install quadpy",
    "pytest",
    "capytaine --help",
    "pip install quadpy",
    "pytest",
    "capytaine --help"
   ],
   "imports":[
    "capytaine",
    "capytaine",
    "capytaine"
   ],
   "requires":[
    "pytest",
    "hypothesis",
    "pip",
    "pytest",
    "hypothesis",
    "pip",
    "pytest",
    "hypothesis",
    "pip"
   ],
   "source_files":[
    "pytest/*.py",
    "pytest/**/*",
    "pytest/*.py",
    "pytest/**/*",
    "pytest/*.py",
    "pytest/**/*"
   ]
  }
 },
 "name":"capytaine",
 "new_version":"1.2",
 "new_version_attempts":{
  "1.2":1
 },
 "new_version_errors":{},
 "pinning_version":"2020.04.24.08.48.19",
 "raw_meta_yaml":"{% set version = \"1.2\" %}\n{% set hash = \"b3dc967ffde8a0b9d815ab955b92a768711666236474776771b48f22e9e80f89\" %}\n\npackage:\n  name: capytaine\n  version: {{ version }}\n\nsource:\n  url: https://github.com/mancellin/capytaine/archive/v{{ version }}.tar.gz\n  sha256: {{ hash }}\n\nbuild:\n  skip: True  # [py<36]\n  number: 1\n  script: \"{{ PYTHON }} -m pip install . --no-deps -vv\"\n  entry_points:\n    - capytaine = capytaine.ui.cli:main\n\nrequirements:\n  build:\n    - {{ compiler('fortran') }}\n    - {{ compiler('c') }}\n    - {{ compiler('m2w64_c') }}  # [win]\n    - {{ compiler('m2w64_fortran') }}  # [win]\n    - llvm-openmp  # [osx]\n  host:\n    - python\n    - pip\n    - setuptools\n    - numpy\n    - llvm-openmp  # [osx]\n    - m2w64-toolchain  # [win]\n    - libpython  # [win]\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - scipy\n    - pandas\n    - xarray\n    - llvm-openmp  # [osx]\n\ntest:\n  imports:\n    - capytaine\n  requires:\n    - pytest\n    - hypothesis\n    - pip\n  source_files:\n    - pytest/*.py\n    - pytest/**/*\n  commands:\n    - pip install quadpy  # Optional dependency, needed for some of the tests\n    - pytest\n    - capytaine --help\n\nabout:\n  home: https://github.com/mancellin/capytaine\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: LICENSE\n  summary: A Python-based linear potential flow solver based on Nemoh\n\nextra:\n  recipe-maintainers:\n    - mancellin\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "fortran_compiler_stub",
   "libpython",
   "llvm-openmp",
   "m2w64-toolchain",
   "m2w64_c_compiler_stub",
   "m2w64_fortran_compiler_stub",
   "numpy",
   "pandas",
   "pip",
   "python",
   "scipy",
   "setuptools",
   "xarray"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "fortran_compiler_stub",
    "llvm-openmp",
    "m2w64_c_compiler_stub",
    "m2w64_fortran_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "libpython",
    "llvm-openmp",
    "m2w64-toolchain",
    "numpy",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "llvm-openmp",
    "numpy",
    "pandas",
    "python",
    "scipy",
    "xarray"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[
    "hypothesis",
    "pip",
    "pytest"
   ]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.6.17",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "fortran_compiler_stub",
    "llvm-openmp",
    "m2w64_c_compiler_stub",
    "m2w64_fortran_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "libpython",
    "llvm-openmp",
    "m2w64-toolchain",
    "numpy",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "llvm-openmp",
    "numpy",
    "pandas",
    "python",
    "scipy",
    "xarray"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[
    "hypothesis",
    "pip",
    "pytest"
   ]
  }
 },
 "url":"https://github.com/mancellin/capytaine/archive/v1.0.1.tar.gz",
 "version":"1.2"
}