{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/205443100.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Compiler",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/233351335.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/299656491.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"RBaseRebuild",
    "migrator_version":0,
    "name":"r-base-3.6.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/415207990.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":2,
    "migrator_version":0,
    "name":"r400"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "bot":{
   "automerge":true
  },
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"r-ahocorasicktrie",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "home":"https://github.com/chambm/AhoCorasickTrie",
   "license":"Apache-2.0",
   "license_family":"APACHE",
   "license_file":"LICENSE-2.0.txt",
   "summary":"Aho-Corasick is an optimal algorithm for finding many keywords in a text. It can locate all matches in a text in O(N+M) time; i.e., the time needed scales linearly with the number of keywords (N) and the size of the text (M). Compare this to the naive approach which takes O(N*M) time to loop through each pattern and scan for it in the text. This implementation builds the trie (the generic name of the data structure) and runs the search in a single function call. If you want to search multiple texts with the same trie, the function will take a list or vector of texts and return a list of matches to each text. By default, all 128 ASCII characters are allowed in both the keywords and the text. A more efficient trie is possible if the alphabet size can be reduced. For example, DNA sequences use at most 19 distinct characters and usually only 4; protein sequences use at most 26 distinct characters and usually only 20. UTF-8 (Unicode) matching is not currently supported."
  },
  "build":{
   "merge_build_host":true,
   "number":"1004",
   "rpaths":[
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/"
   ]
  },
  "extra":{
   "recipe-maintainers":[
    "conda-forge/r",
    "johanneskoester",
    "bgruening",
    "daler",
    "jdblischak",
    "cbrueffer",
    "dbast",
    "conda-forge/r",
    "johanneskoester",
    "bgruening",
    "daler",
    "jdblischak",
    "cbrueffer",
    "dbast",
    "conda-forge/r",
    "johanneskoester",
    "bgruening",
    "daler",
    "jdblischak",
    "cbrueffer",
    "dbast"
   ]
  },
  "package":{
   "name":"r-ahocorasicktrie",
   "version":"0.1.0"
  },
  "requirements":{
   "build":[
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "filesystem",
    "make",
    "sed",
    "coreutils",
    "zip",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ],
   "host":[
    "r-base",
    "r-rcpp >=0.12.5",
    "r-base",
    "r-rcpp >=0.12.5",
    "r-base",
    "r-rcpp >=0.12.5"
   ],
   "run":[
    "r-base",
    "gcc-libs",
    "r-rcpp >=0.12.5",
    "r-base",
    "r-rcpp >=0.12.5",
    "r-base",
    "r-rcpp >=0.12.5"
   ]
  },
  "source":{
   "fn":"AhoCorasickTrie_0.1.0.tar.gz",
   "sha256":"2803c4925a96b6bee59c3c843ca792c61d5e811b4994175ed2712bedba67544c",
   "url":[
    "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.0.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.0.tar.gz",
    "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.0.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.0.tar.gz",
    "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.0.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.0.tar.gz"
   ]
  },
  "test":{
   "commands":[
    "\"%R%\" -e \"library('AhoCorasickTrie')\"",
    "$R -e \"library('AhoCorasickTrie')\"",
    "$R -e \"library('AhoCorasickTrie')\""
   ]
  }
 },
 "name":"r-ahocorasicktrie",
 "new_version":"0.1.0",
 "pinning_version":"2020.05.06.22.15.02",
 "raw_meta_yaml":"{% set version = \"0.1.0\" %}\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: r-ahocorasicktrie\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  fn: AhoCorasickTrie_{{ version }}.tar.gz\n  url:\n    - {{ cran_mirror }}/src/contrib/AhoCorasickTrie_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_{{ version }}.tar.gz\n  sha256: 2803c4925a96b6bee59c3c843ca792c61d5e811b4994175ed2712bedba67544c\n\nbuild:\n  merge_build_host: true  # [win]\n  number: 1004\n  skip: true  # [win32]\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ compiler('c') }}        # [not win]\n    - {{ compiler('cxx') }}      # [not win]\n    - {{ compiler('m2w64_c') }}        # [win]\n    - {{ compiler('m2w64_cxx') }}        # [win]\n    - {{ posix }}filesystem        # [win]\n    - {{ posix }}make\n    - {{ posix }}sed               # [win]\n    - {{ posix }}coreutils         # [win]\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n    - r-rcpp >=0.12.5\n  run:\n    - r-base\n    - {{ native }}gcc-libs         # [win]\n    - r-rcpp >=0.12.5\n\ntest:\n  commands:\n    - $R -e \"library('AhoCorasickTrie')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('AhoCorasickTrie')\\\"\"  # [win]\n\nabout:\n  home: https://github.com/chambm/AhoCorasickTrie\n  license: Apache-2.0\n  summary: Aho-Corasick is an optimal algorithm for finding many keywords in a text. It can locate all matches in a text in O(N+M) time; i.e., the time needed scales linearly with the number of keywords (N) and the size of the text (M). Compare this to the naive approach which takes O(N*M) time to loop through each pattern\n    and scan for it in the text. This implementation builds the trie (the generic name of the data structure) and runs the search in a single function call. If you want to search multiple texts with the same trie, the function will take a list or vector of texts and return a list of matches to each text. By default, all\n    128 ASCII characters are allowed in both the keywords and the text. A more efficient trie is possible if the alphabet size can be reduced. For example, DNA sequences use at most 19 distinct characters and usually only 4; protein sequences use at most 26 distinct characters and usually only 20. UTF-8 (Unicode) matching\n    is not currently supported.\n  license_family: APACHE\n  license_file: LICENSE-2.0.txt\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n    - johanneskoester\n    - bgruening\n    - daler\n    - jdblischak\n    - cbrueffer\n    - dbast\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "coreutils",
   "cxx_compiler_stub",
   "filesystem",
   "gcc-libs",
   "m2w64_c_compiler_stub",
   "m2w64_cxx_compiler_stub",
   "make",
   "r-base",
   "r-rcpp",
   "sed",
   "zip"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "coreutils",
    "cxx_compiler_stub",
    "filesystem",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "make",
    "sed",
    "zip"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "r-base",
    "r-rcpp"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "gcc-libs",
    "r-base",
    "r-rcpp"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.0\n",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "coreutils",
    "cxx_compiler_stub",
    "filesystem",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "make",
    "sed",
    "zip"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "r-base",
    "r-rcpp >=0.12.5"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "gcc-libs",
    "r-base",
    "r-rcpp >=0.12.5"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":[
  "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.0.tar.gz",
  "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.0.tar.gz",
  "https://cran.r-project.org/src/contrib/AhoCorasickTrie_0.1.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/AhoCorasickTrie/AhoCorasickTrie_0.1.0.tar.gz"
 ],
 "version":"0.1.0"
}