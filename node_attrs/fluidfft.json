{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/320080931.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.3.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/340490465.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/415596571.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.3.1"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "provider":{
   "win":"azure"
  }
 },
 "feedstock_name":"fluidfft",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"Fluidfft provides C++ classes and their Python wrapper classes written in\nCython useful to perform Fast Fourier Transform (FFT) with different\nlibraries\n",
   "doc_url":"https://fluidfft.readthedocs.io",
   "home":"https://bitbucket.org/fluiddyn/fluidfft",
   "license":"CeCILL-B",
   "license_file":"LICENSE.txt",
   "summary":"Efficient and easy Fast Fourier Transform (FFT) for Python."
  },
  "build":{
   "entry_points":[
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run"
   ],
   "number":"1100",
   "skip":true,
   "string":"nompi_h_1100"
  },
  "extra":{
   "recipe-maintainers":[
    "CyrilleBonamy",
    "paugier",
    "CyrilleBonamy",
    "paugier",
    "CyrilleBonamy",
    "paugier"
   ]
  },
  "package":{
   "name":"fluidfft",
   "version":"0.2.9"
  },
  "requirements":{
   "build":[
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host":[
    "pip",
    "python >=3.6",
    "nompi",
    "transonic",
    "fftw",
    "fftw * mpi_nompi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "libblas",
    "libcblas",
    "pip",
    "python >=3.6",
    "nompi",
    "transonic",
    "fftw",
    "fftw * mpi_nompi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python >=3.6",
    "nompi",
    "transonic",
    "fftw",
    "fftw * mpi_nompi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas"
   ],
   "run":[
    "nompi",
    "fluiddyn",
    "fluiddyn * mpi_nompi_*",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_nompi_*",
    "pyfftw",
    "nompi",
    "fluiddyn",
    "fluiddyn * mpi_nompi_*",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_nompi_*",
    "pyfftw",
    "nompi",
    "fluiddyn",
    "fluiddyn * mpi_nompi_*",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_nompi_*",
    "pyfftw"
   ]
  },
  "source":{
   "sha256":"fdc4772d086ea0194d3e65a9ea471bd787e46888f472b1b57c4ad5515c3a899d",
   "url":"https://pypi.io/packages/source/f/fluidfft/fluidfft-0.2.9.tar.gz"
  },
  "test":{
   "commands":[
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3"
   ],
   "imports":[
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d"
   ]
  }
 },
 "name":"fluidfft",
 "new_version":"0.3.1",
 "new_version_attempts":{
  "0.3.1":1
 },
 "new_version_errors":{},
 "pinning_version":"2020.05.09.00.08.03",
 "raw_meta_yaml":"{% set name = \"fluidfft\" %}\n{% set version = \"0.2.9\" %}\n{% set build = 1000 %}\n# ensure mpi is defined (needed for conda-smithy recipe-lint)\n{% set mpi = mpi or 'nompi' %}\n\n{% if mpi == 'nompi' %}\n# prioritize nompi variant via build number\n{% set build = build + 100 %}\n{% endif %}\n\n\npackage:\n  name: \"{{ name|lower }}\"\n  version: \"{{ version }}\"\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: fdc4772d086ea0194d3e65a9ea471bd787e46888f472b1b57c4ad5515c3a899d\n\nbuild:\n  number: {{ build }}\n  # add build string so packages can depend on\n  # mpi or nompi variants explicitly:\n  # `pkg * mpi_mpich_*` for mpich\n  # `pkg * mpi_*` for any mpi\n  # `pkg * nompi_*` for no mpi\n\n  {% if mpi != 'nompi' %}\n  {% set mpi_prefix = \"mpi_\" + mpi %}\n  {% else %}\n  {% set mpi_prefix = \"nompi\" %}\n  {% endif %}\n  string: \"{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}\"\n\n  {% if mpi != 'nompi' %}\n\n  run_exports:\n    - {{ name }} * {{ mpi_prefix }}_*\n  {% endif %}\n\n  # skip: true  # [win and (mpi != 'nompi')]\n  skip: true  # [win]\n  entry_points:\n    - fluidfft-bench = fluidfft.bench:run\n    - fluidfft-bench-analysis = fluidfft.bench_analysis:run\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n  host:\n    - pip\n    - python >=3.6\n    - {{ mpi }}  # [ mpi != 'nompi' ]\n    - openssh  # [ mpi == 'openmpi' ]\n    - transonic\n    - fftw\n    - fftw * mpi_{{ mpi }}_*  # [mpi != 'nompi']\n    - jinja2\n    - cython\n    - mpi4py  # [ mpi != 'nompi' ]\n    - pythran  # [ not win ]\n    - libblas\n    - libcblas\n  run:\n    - {{ mpi }}  # [ mpi != 'nompi' ]\n    - openssh  # [ mpi == 'openmpi' ]\n    - fluiddyn\n    - fluiddyn * mpi_{{ mpi }}_*  # [mpi != 'nompi']\n    - pandas\n    - transonic\n    - fftw\n    - fftw * mpi_{{ mpi }}_*  # [mpi != 'nompi']\n    - pyfftw\n\ntest:\n  imports:\n    - fluidfft\n    - fluidfft.bench\n    - fluidfft.bench_analysis\n    - fluidfft.fft2d\n    - fluidfft.fft3d\n    - fluidfft.test_init\n    - fluidfft.util\n    - fluidfft.fft2d.with_fftw2d\n    - fluidfft.fft3d.with_fftw3d\n    - fluidfft.fft2d.mpi_with_fftw1d  # [ mpi != 'nompi' ]\n    - fluidfft.fft3d.mpi_with_fftw1d  # [ mpi != 'nompi' ]\n    - fluidfft.fft2d.mpi_with_fftwmpi2d  # [ mpi != 'nompi' ]\n    - fluidfft.fft3d.mpi_with_fftwmpi3d  # [ mpi != 'nompi' ]\n  commands:\n    - fluidfft-bench\n    - fluidfft-bench-analysis\n    - fluidfft-bench 32 -d 3\n\nabout:\n  home: https://bitbucket.org/fluiddyn/fluidfft\n  license: CeCILL-B\n  license_file: LICENSE.txt \n  summary: Efficient and easy Fast Fourier Transform (FFT) for Python.\n  description: |\n    Fluidfft provides C++ classes and their Python wrapper classes written in\n    Cython useful to perform Fast Fourier Transform (FFT) with different\n    libraries\n  doc_url: https://fluidfft.readthedocs.io  \n\nextra:\n  recipe-maintainers:\n    - CyrilleBonamy\n    - paugier\n",
 "req":{
  "__set__":true,
  "elements":[
   "cxx_compiler_stub",
   "cython",
   "fftw",
   "fluiddyn",
   "jinja2",
   "libblas",
   "libcblas",
   "mpi4py",
   "nompi",
   "pandas",
   "pip",
   "pyfftw",
   "python",
   "pythran",
   "transonic"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "fftw",
    "jinja2",
    "libblas",
    "libcblas",
    "mpi4py",
    "nompi",
    "pip",
    "python",
    "pythran",
    "transonic"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "fftw",
    "fluiddyn",
    "nompi",
    "pandas",
    "pyfftw",
    "transonic"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.0\n",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "fftw",
    "fftw * mpi_nompi_*",
    "jinja2",
    "libblas",
    "libcblas",
    "mpi4py",
    "nompi",
    "pip",
    "python >=3.6",
    "pythran",
    "transonic"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "fftw",
    "fftw * mpi_nompi_*",
    "fluiddyn",
    "fluiddyn * mpi_nompi_*",
    "nompi",
    "pandas",
    "pyfftw",
    "transonic"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://pypi.io/packages/source/f/fluidfft/fluidfft-0.2.9.tar.gz",
 "version":"0.2.9"
}