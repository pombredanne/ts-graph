{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/289384731.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Rebuild",
    "migrator_version":0,
    "name":"gsl-2.5"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/292610306.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2.18.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/293520342.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Rebuild",
    "migrator_version":0,
    "name":"readline-8.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/339863282.json"
   },
   "data":{
    "bot_rerun":true,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/339935554.json"
   },
   "data":{
    "bot_rerun":1579272528.707581,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/342801293.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/369463634.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"2.20.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/371553842.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"gsl26"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/382453737.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":2,
    "migrator_version":0,
    "name":"boost172"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{},
 "feedstock_name":"nest-simulator",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"You can use NEST either as a for the interpreted programming language Python (PyNEST) or as a stand alone\napplication (nest). PyNEST provides a set of commands to the Python interpreter which give you access to NEST's\nsimulation kernel. With these commands, you describe and run your network simulation. You can also complement\nPyNEST with PyNN, a simulator-independent set of Python commands to formulate and run neural simulations. While\nyou define your simulations in Python, the actual simulation is executed within NEST's highly optimized\nsimulation kernel which is written in C++. A NEST simulation tries to follow the logic of an\nelectrophysiological experiment that takes place inside a computer with the difference, that the neural system\nto be investigated must be defined by the experimenter. The neural system is defined by a possibly large number\nof neurons and their connections. In a NEST network, different neuron and synapse models can coexist. Any two\nneurons can have multiple connections with different properties. Thus, the connectivity can in general not\nbe described by a weight or connectivity matrix but rather as an adjacency list. To manipulate or observe the\nnetwork dynamics, the experimenter can define so-called devices which represent the various instruments (for\nmeasuring and stimulation) found in an experiment. These devices write their data either to memory or to file.\nNEST is extensible and new models for neurons, synapses, and devices can be added. To get started with NEST,\nplease see the documentation page <https://nest-simulator.org/documentation/>.\n",
   "dev_url":"https://github.com/nest/nest-simulator",
   "doc_url":"https://nest-simulator.readthedocs.io/en/latest/",
   "home":"http://www.nest-simulator.org/",
   "license":"GPL-2.0",
   "license_family":"GPL",
   "license_file":"LICENSE",
   "summary":"NEST is a simulator for spiking neural network models that focuses on the dynamics, size and structure of neural\nsystems rather than on the exact morphology of individual neurons.\n"
  },
  "build":{
   "number":"105",
   "skip":true,
   "string":"nompi_pyh_105"
  },
  "extra":{
   "recipe-maintainers":[
    "steffengraber",
    "steffengraber",
    "steffengraber"
   ]
  },
  "package":{
   "name":"nest-simulator",
   "version":"2.20.0"
  },
  "requirements":{
   "build":[
    "cmake >=3.6",
    "make",
    "openmp",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.6",
    "llvm-openmp",
    "make",
    "openmp",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.6",
    "make",
    "openmp",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host":[
    "boost-cpp",
    "boost",
    "cython",
    "gsl",
    "libcblas",
    "libtool",
    "ncurses",
    "nompi",
    "mpi4py",
    "openmp",
    "python",
    "readline",
    "scipy",
    "openssh",
    "statsmodels",
    "zlib",
    "boost-cpp",
    "boost",
    "cython",
    "gsl",
    "libcblas",
    "libtool",
    "llvm-openmp",
    "ncurses",
    "nompi",
    "mpi4py",
    "openmp",
    "python",
    "readline",
    "scipy",
    "openssh",
    "statsmodels",
    "zlib",
    "boost-cpp",
    "boost",
    "cython",
    "gsl",
    "libcblas",
    "libtool",
    "ncurses",
    "nompi",
    "mpi4py",
    "openmp",
    "python",
    "readline",
    "scipy",
    "openssh",
    "statsmodels",
    "zlib"
   ],
   "run":[
    "boost-cpp",
    "boost",
    "cython",
    "gsl",
    "libcblas",
    "libtool",
    "ncurses",
    "nompi",
    "mpi4py",
    "openmp",
    "python",
    "readline",
    "scipy",
    "statsmodels",
    "openssh",
    "zlib",
    "boost-cpp",
    "boost",
    "cython",
    "gsl",
    "libcblas",
    "libtool",
    "llvm-openmp",
    "ncurses",
    "nompi",
    "mpi4py",
    "openmp",
    "python",
    "python.app",
    "readline",
    "scipy",
    "statsmodels",
    "openssh",
    "zlib",
    "boost-cpp",
    "boost",
    "cython",
    "gsl",
    "libcblas",
    "libtool",
    "ncurses",
    "nompi",
    "mpi4py",
    "openmp",
    "python",
    "readline",
    "scipy",
    "statsmodels",
    "openssh",
    "zlib"
   ]
  },
  "source":{
   "patches":[
    "source/patches/changes_py38.patch",
    "source/patches/changes_py38.patch",
    "source/patches/changes_py38.patch"
   ],
   "sha256":"40e33187c22d6e843d80095b221fa7fd5ebe4dbc0116765a91fc5c425dd0eca4",
   "url":"https://github.com/nest/nest-simulator/archive/v2.20.0.tar.gz"
  },
  "test":{
   "commands":[
    "nest --help",
    "sli --help",
    "nest --help",
    "sli --help",
    "nest --help",
    "sli --help"
   ],
   "imports":[
    "nest",
    "nest",
    "nest"
   ]
  }
 },
 "name":"nest-simulator",
 "new_version":"2.20.0",
 "pinning_version":"2020.02.20",
 "raw_meta_yaml":"{% set name = \"nest-simulator\" %}\n{% set version = \"2.20.0\" %}\n\n{% set build = 5 %}\n\n# mpi must be defined for conda-smithy lint\n{% set mpi = mpi or 'nompi' %}\n\n{% if mpi == 'nompi' %}\n# prefer nompi builds via a build number offset\n{% set build = build + 100 %}\n{% endif %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/nest/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: 40e33187c22d6e843d80095b221fa7fd5ebe4dbc0116765a91fc5c425dd0eca4\n  patches:\n    - source/patches/changes_py38.patch\n\nbuild:\n  number: {{ build }}\n  {% if mpi != 'nompi' %}\n  {% set mpi_prefix = \"mpi_\" + mpi %}\n  {% else %}\n  {% set mpi_prefix = \"nompi\" %}\n  {% endif %}\n  # add build string so packages can depend on\n  # mpi or nompi variants\n  # dependencies:\n  # mpi_*` for any mpi\n  # nompi_*` for no mpi\n  # examle see;\n  # https://github.com/conda-forge/h5py-feedstock/blob/master/recipe/meta.yaml\n  string: \"{{ mpi_prefix }}_py{{ py }}h{{ PKG_HASH }}_{{ build }}\"\n  skip: true  # [win or py<30]\n  # osx_is_app: True\n\nrequirements:\n  build:\n    - cmake >=3.6\n    # - git\n    - llvm-openmp  # [osx]\n    - make\n    - openmp  # [linux][mpi != 'nompi']\n    # - sed\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n    - boost-cpp\n    - boost\n    - cython\n    - gsl\n    - {{ pin_compatible('libcblas') }}\n    - libtool\n    - llvm-openmp  # [osx]\n    # - matplotlib\n    - {{ pin_compatible('ncurses') }}\n    # - {{ pin_compatible('numpy') }}\n    - {{ mpi }}  # [mpi != 'nompi']\n    - mpi4py  # [mpi != 'nompi']\n    - openmp  # [linux][mpi != 'nompi']\n    - python\n    - readline\n    - scipy\n    - openssh\n    - statsmodels\n    - zlib\n  run:\n    - boost-cpp\n    - boost\n    - cython\n    - gsl\n    - {{ pin_compatible('libcblas') }}\n    - libtool\n    - llvm-openmp  # [osx]\n    # - matplotlib\n    - {{ pin_compatible('ncurses') }}\n    # - {{ pin_compatible('numpy') }}\n    - {{ mpi }}  # [mpi != 'nompi']\n    - mpi4py  # [mpi != 'nompi']\n    - openmp  # [linux][mpi != 'nompi']\n    - python\n    - python.app  # [osx]\n    - readline\n    - scipy\n    - statsmodels\n    - openssh\n    - zlib\n\ntest:\n  imports:\n    - nest\n  commands:\n    - nest --help\n    - sli --help\n\nabout:\n  home: http://www.nest-simulator.org/\n  license:  GPL-2.0\n  license_family: GPL\n  license_file: LICENSE\n  summary: |\n    NEST is a simulator for spiking neural network models that focuses on the dynamics, size and structure of neural\n    systems rather than on the exact morphology of individual neurons.\n  description: |\n    You can use NEST either as a for the interpreted programming language Python (PyNEST) or as a stand alone\n    application (nest). PyNEST provides a set of commands to the Python interpreter which give you access to NEST's\n    simulation kernel. With these commands, you describe and run your network simulation. You can also complement\n    PyNEST with PyNN, a simulator-independent set of Python commands to formulate and run neural simulations. While\n    you define your simulations in Python, the actual simulation is executed within NEST's highly optimized\n    simulation kernel which is written in C++. A NEST simulation tries to follow the logic of an\n    electrophysiological experiment that takes place inside a computer with the difference, that the neural system\n    to be investigated must be defined by the experimenter. The neural system is defined by a possibly large number\n    of neurons and their connections. In a NEST network, different neuron and synapse models can coexist. Any two\n    neurons can have multiple connections with different properties. Thus, the connectivity can in general not\n    be described by a weight or connectivity matrix but rather as an adjacency list. To manipulate or observe the\n    network dynamics, the experimenter can define so-called devices which represent the various instruments (for\n    measuring and stimulation) found in an experiment. These devices write their data either to memory or to file.\n    NEST is extensible and new models for neurons, synapses, and devices can be added. To get started with NEST,\n    please see the documentation page <https://nest-simulator.org/documentation/>.\n  doc_url: https://nest-simulator.readthedocs.io/en/latest/\n  dev_url: https://github.com/nest/nest-simulator\n\nextra:\n  recipe-maintainers:\n    - steffengraber\n",
 "req":{
  "__set__":true,
  "elements":[
   "boost",
   "boost-cpp",
   "c_compiler_stub",
   "cmake",
   "cxx_compiler_stub",
   "cython",
   "gsl",
   "libcblas",
   "libtool",
   "llvm-openmp",
   "make",
   "mpi4py",
   "ncurses",
   "nompi",
   "openmp",
   "openssh",
   "python",
   "python.app",
   "readline",
   "scipy",
   "statsmodels",
   "zlib"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "llvm-openmp",
    "make",
    "openmp"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "boost",
    "boost-cpp",
    "cython",
    "gsl",
    "libcblas",
    "libtool",
    "llvm-openmp",
    "mpi4py",
    "ncurses",
    "nompi",
    "openmp",
    "openssh",
    "python",
    "readline",
    "scipy",
    "statsmodels",
    "zlib"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "boost",
    "boost-cpp",
    "cython",
    "gsl",
    "libcblas",
    "libtool",
    "llvm-openmp",
    "mpi4py",
    "ncurses",
    "nompi",
    "openmp",
    "openssh",
    "python",
    "python.app",
    "readline",
    "scipy",
    "statsmodels",
    "zlib"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"3.6.8",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cmake >=3.6",
    "cxx_compiler_stub",
    "llvm-openmp",
    "make",
    "openmp"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "boost",
    "boost-cpp",
    "cython",
    "gsl",
    "libcblas",
    "libtool",
    "llvm-openmp",
    "mpi4py",
    "ncurses",
    "nompi",
    "openmp",
    "openssh",
    "python",
    "readline",
    "scipy",
    "statsmodels",
    "zlib"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "boost",
    "boost-cpp",
    "cython",
    "gsl",
    "libcblas",
    "libtool",
    "llvm-openmp",
    "mpi4py",
    "ncurses",
    "nompi",
    "openmp",
    "openssh",
    "python",
    "python.app",
    "readline",
    "scipy",
    "statsmodels",
    "zlib"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://github.com/nest/nest-simulator/archive/v2.18.0.tar.gz",
 "version":"2.20.0"
}