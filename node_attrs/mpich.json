{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/197276282.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Compiler",
    "migrator_version":0
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/209929184.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"CompilerRebuild",
    "migrator_version":1,
    "name":"Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/282253393.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"ArchRebuild",
    "migrator_version":1,
    "name":"aarch64 and ppc64le addition"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/308176664.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"GFortranOSXRebuild",
    "migrator_version":0,
    "name":"fortran_compiler_stub-7"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/340518823.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"3.3.2"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "compiler_stack":"comp7",
  "max_py_ver":"37",
  "max_r_ver":"35",
  "provider":{
   "linux_aarch64":"default",
   "linux_ppc64le":"default"
  }
 },
 "feedstock_name":"mpich",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"MPICH is a high performance and widely portable implementation of the\nMessage Passing Interface (MPI) standard.\n",
   "dev_url":"https://wiki.mpich.org/mpich/index.php/Main_Page",
   "doc_url":"http://www.mpich.org/documentation/guides",
   "home":"http://www.mpich.org/",
   "license":"MPICH",
   "license_family":"Other",
   "license_file":"COPYRIGHT",
   "summary":"A high performance widely portable implementation of the MPI standard."
  },
  "build":{
   "number":"0",
   "skip":true
  },
  "extra":{
   "recipe-maintainers":[
    "astrofrog-conda-forge",
    "bekozi",
    "dalcinl",
    "minrk",
    "msarahan",
    "ocefpaf",
    "beckermr",
    "astrofrog-conda-forge",
    "bekozi",
    "dalcinl",
    "minrk",
    "msarahan",
    "ocefpaf",
    "beckermr",
    "astrofrog-conda-forge",
    "bekozi",
    "dalcinl",
    "minrk",
    "msarahan",
    "ocefpaf",
    "beckermr"
   ]
  },
  "outputs":[
   {
    "build":{
     "run_exports":[
      "mpich"
     ]
    },
    "name":"mpich",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub"
     ],
     "host":[],
     "run":[
      "mpi 1.0 mpich"
     ]
    },
    "script":"build-mpi.sh",
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.sh"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "script":[
      "echo 'ok'"
     ]
    },
    "name":"mpich-mpicc",
    "requirements":{
     "run":[
      "mpich",
      "c_compiler_stub"
     ]
    },
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.c"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "script":[
      "echo 'ok'"
     ]
    },
    "name":"mpich-mpicxx",
    "requirements":{
     "run":[
      "mpich",
      "cxx_compiler_stub"
     ]
    },
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.cxx"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "script":[
      "echo 'ok'"
     ]
    },
    "name":"mpich-mpifort",
    "requirements":{
     "run":[
      "mpich",
      "fortran_compiler_stub"
     ]
    },
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.f",
      "tests/helloworld.f90"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "run_exports":[
      "mpich"
     ]
    },
    "name":"mpich",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "make"
     ],
     "host":[],
     "run":[
      "mpi 1.0 mpich"
     ]
    },
    "script":"build-mpi.sh",
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.sh"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "script":[
      "echo \"\""
     ]
    },
    "name":"mpich-mpicc",
    "requirements":{
     "run":[
      "mpich",
      "c_compiler_stub"
     ]
    },
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.c"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "script":[
      "echo \"\""
     ]
    },
    "name":"mpich-mpicxx",
    "requirements":{
     "run":[
      "mpich",
      "cxx_compiler_stub"
     ]
    },
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.cxx"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "script":[
      "echo \"\""
     ]
    },
    "name":"mpich-mpifort",
    "requirements":{
     "run":[
      "mpich",
      "fortran_compiler_stub"
     ]
    },
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.f",
      "tests/helloworld.f90"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "run_exports":[
      "mpich"
     ]
    },
    "name":"mpich",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "fortran_compiler_stub",
      "make"
     ],
     "host":[],
     "run":[
      "mpi 1.0 mpich"
     ]
    },
    "script":"build-mpi.sh",
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.sh"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "script":[
      "echo 'ok'"
     ]
    },
    "name":"mpich-mpicc",
    "requirements":{
     "run":[
      "mpich",
      "c_compiler_stub"
     ]
    },
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.c"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "script":[
      "echo 'ok'"
     ]
    },
    "name":"mpich-mpicxx",
    "requirements":{
     "run":[
      "mpich",
      "cxx_compiler_stub"
     ]
    },
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.cxx"
     ],
     "script":"run_test.sh"
    }
   },
   {
    "build":{
     "script":[
      "echo 'ok'"
     ]
    },
    "name":"mpich-mpifort",
    "requirements":{
     "run":[
      "mpich",
      "fortran_compiler_stub"
     ]
    },
    "test":{
     "files":[
      "mpiexec.sh",
      "tests/helloworld.f",
      "tests/helloworld.f90"
     ],
     "script":"run_test.sh"
    }
   }
  ],
  "package":{
   "name":"mpich-mpi",
   "version":"3.3.2"
  },
  "source":{
   "fn":"mpich-3.3.2.tar.gz",
   "sha256":"4bfaf8837a54771d3e4922c84071ef80ffebddbb6971a006038d91ee7ef959b9",
   "url":"http://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz"
  }
 },
 "name":"mpich-mpi",
 "new_version":"3.3.2",
 "outputs_names":[
  "mpich",
  "mpich-mpicc",
  "mpich-mpicxx",
  "mpich-mpifort"
 ],
 "pinning_version":"2019.11.13",
 "raw_meta_yaml":"{% set version = \"3.3.2\" %}\n{% set build = 0 %}\n\npackage:\n  # must not match any outputs for requirements to be handled correctly\n  name: mpich-mpi\n  version: {{ version }}\n\nsource:\n  fn: mpich-{{ version }}.tar.gz\n  url: http://www.mpich.org/static/downloads/{{ version }}/mpich-{{ version }}.tar.gz\n  sha256: 4bfaf8837a54771d3e4922c84071ef80ffebddbb6971a006038d91ee7ef959b9\n\nbuild:\n  number: {{ build }}\n  skip: True  # [win]\n\noutputs:\n  {% if mpi_type == 'external' %}\n  - name: mpich\n    string: \"{{ mpi_type }}_{{ build }}\"\n    track_features:\n      - mpich_{{ mpi_type }}\n    requirements:\n      run:\n        - mpi 1.0 mpich\n    test:\n      commands:\n        - echo \"It works!\"\n  {% else %}\n  - name: mpich\n    script: build-mpi.sh\n    build:\n      run_exports:\n        - {{ pin_subpackage('mpich', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - make  # [unix]\n      host: []\n      run:\n        - mpi 1.0 mpich\n    test:\n      script: run_test.sh\n      files:\n        - mpiexec.sh\n        - tests/helloworld.sh\n\n  - name: mpich-mpicc\n    build:\n      script:\n        - echo 'ok'  # [not osx]\n        # make CONDA_BUILD_SYSROOT a 'used variable'\n        # so that conda-build knows to pass it to the test env\n        - echo \"{{CONDA_BUILD_SYSROOT}}\"  # [osx]\n    requirements:\n      run:\n        - {{ pin_subpackage('mpich', exact=True) }}\n        # host C compilers work fine (better) on mac\n        - {{ compiler('c') }}\n    test:\n      script: run_test.sh\n      files:\n        - mpiexec.sh\n        - tests/helloworld.c\n\n  - name: mpich-mpicxx\n    build:\n      script:\n        - echo 'ok'  # [not osx]\n        # make CONDA_BUILD_SYSROOT a 'used variable'\n        # so that conda-build knows to pass it to the test env\n        - echo \"{{CONDA_BUILD_SYSROOT}}\"  # [osx]\n    requirements:\n      run:\n        - {{ pin_subpackage('mpich', exact=True) }}\n        # host C compilers work fine (better) on mac\n        - {{ compiler('cxx') }}\n    test:\n      script: run_test.sh\n      files:\n        - mpiexec.sh\n        - tests/helloworld.cxx\n\n  - name: mpich-mpifort\n    build:\n      script:\n        - echo 'ok'  # [not osx]\n        # make CONDA_BUILD_SYSROOT a 'used variable'\n        # so that conda-build knows to pass it to the test env\n        - echo \"{{CONDA_BUILD_SYSROOT}}\"  # [osx]\n    requirements:\n      run:\n        - {{ pin_subpackage('mpich', exact=True) }}\n        - {{ compiler('fortran') }}\n    test:\n      script: run_test.sh\n      files:\n        - mpiexec.sh\n        - tests/helloworld.f\n        - tests/helloworld.f90\n  {% endif %}\n\nabout:\n  home: http://www.mpich.org/\n  license: MPICH\n  license_file: COPYRIGHT\n  license_family: Other\n  summary: 'A high performance widely portable implementation of the MPI standard.'\n  description: |\n    MPICH is a high performance and widely portable implementation of the\n    Message Passing Interface (MPI) standard.\n  doc_url: http://www.mpich.org/documentation/guides\n  dev_url: https://wiki.mpich.org/mpich/index.php/Main_Page\n\nextra:\n  recipe-maintainers:\n    - astrofrog-conda-forge\n    - bekozi\n    - dalcinl\n    - minrk\n    - msarahan\n    - ocefpaf\n    - beckermr\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "cxx_compiler_stub",
   "fortran_compiler_stub",
   "make",
   "mpi",
   "mpich"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "make"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "mpi",
    "mpich"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"3.6.2",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "make"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "mpi 1.0 mpich",
    "mpich"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"http://www.mpich.org/static/downloads/3.3.1/mpich-3.3.1.tar.gz",
 "version":"3.3.2"
}